{
  "command_name": {
    "main_command": "curl",
    "subcommand": null
  },
  "description": "transfer a URL",
  "flags": [
    {
      "aliases": [
        "--abstract-unix-socket"
      ],
      "description": "(HTTP) Connect through an abstract Unix domain socket, instead of using the network. Note: netstat shows the path of an abstract socket prefixed with '@', however the <path> argument should not have this leading character. Example:  curl --abstract-unix-socket socketpath https://example.com  See also --unix-socket. Added in 7.53.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--alt-svc"
      ],
      "description": "(HTTPS) This option enables the alt-svc parser in curl. If the file name points to an existing alt-svc cache file, that will be used. After a completed transfer, the cache will be saved to the file name again if it has been modified. Specify a \"\" file name (zero length) to avoid loading/saving and make curl just handle the cache in memory.  If this option is used several times, curl will load contents from all the files but the last one will be used for saving.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--anyauth"
      ],
      "description": "(HTTP) Tells curl to figure out authentication method by itself, and use the most secure one the remote site claims to support. This is done by first doing a request and checking the response-headers, thus possibly inducing an extra network round-trip. This is used instead of setting a specific authentication method, which you can do with --basic , --digest , --ntlm , and --negotiate .",
      "takes_argument": false
    },
    {
      "aliases": [
        "-a",
        "--append"
      ],
      "description": "(FTP SFTP) When used in an upload, this makes curl append to the target file instead of overwriting it. If the remote file does not exist, it will be created. Note that this flag is ignored by some SFTP servers (including OpenSSH). Example:  curl --upload-file local --append ftp://example.com/  See also -r, --range and -C, --continue-at. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--aws-sigv4"
      ],
      "description": "Use AWS V4 signature authentication in the transfer. The provider argument is a string that is used by the algorithm when creating outgoing authentication headers.  The region argument is a string that points to a geographic area of a resources collection (region-code) when the region name is omitted from the endpoint.  The service argument is a string that points to a function provided by a cloud (service-code) when the service name is omitted from the endpoint.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--basic"
      ],
      "description": "(HTTP) Tells curl to use HTTP Basic authentication with the remote host. This is the default and this option is usually pointless, unless you use it to override a previously set option that sets a different authentication method (such as --ntlm , --digest , or --negotiate ). Used together with -u, --user.  Example:  curl -u name:password --basic https://example.com  See also --proxy-basic. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--cacert"
      ],
      "description": "(TLS) Tells curl to use the specified certificate file to verify the peer. The file may contain multiple CA certificates. The certificate(s) must be in PEM format. Normally curl is built to use a default file for this, so this option is typically used to alter that default file. curl recognizes the environment variable named 'CURL_CA_BUNDLE' if it is set, and uses the given path as a path to a CA cert bundle. This option overrides that variable. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--capath"
      ],
      "description": "(TLS) Tells curl to use the specified certificate directory to verify the peer. Multiple paths can be provided by separating them with \":\" (e.g. \"path1:path2:path3\"). The certificates must be in PEM format, and if curl is built against OpenSSL, the directory must have been processed using the c_rehash utility supplied with OpenSSL. Using --capath can allow OpenSSL-powered curl to make SSL-connections much more efficiently than using --cacert if the --cacert file contains many CA certificates.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cert-status"
      ],
      "description": "(TLS) Tells curl to verify the status of the server certificate by using the Certificate Status Request (aka. OCSP stapling) TLS extension. If this option is enabled and the server sends an invalid (e.g. expired) response, if the response suggests that the server certificate has been revoked, or no response at all is received, the verification fails.  This is currently only implemented in the OpenSSL, GnuTLS and NSS backends.  Example:  curl --cert-status https://example.com ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--cert-type"
      ],
      "description": "(TLS) Tells curl what type the provided client certificate is using. PEM, DER, ENG and P12 are recognized types. The default type depends on the TLS backend and is usually PEM, however for Secure Transport and Schannel it is P12. If --cert is a pkcs11: URI then ENG is the default type.  If this option is used several times, the last one will be used.  Example:  curl --cert-type PEM --cert file https://example.com  See also -E, --cert, --key and --key-type. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-E",
        "--cert"
      ],
      "description": "(TLS) Tells curl to use the specified client certificate file when getting a file with HTTPS, FTPS or another SSL-based protocol. The certificate must be in PKCS#12 format if using Secure Transport, or PEM format if using any other engine. If the optional password is not specified, it will be queried for on the terminal. Note that this option assumes a certificate file that is the private key and the client certificate concatenated. See --cert and --key to specify them independently.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ciphers"
      ],
      "description": "(TLS) Specifies which ciphers to use in the connection. The list of ciphers must specify valid ciphers. Read up on SSL cipher list details on this URL:   https://curl.se/docs/ssl-ciphers.html  If this option is used several times, the last one will be used.  Example:  curl --ciphers ECDHE-ECDSA-AES256-CCM8 https://example.com  See also --tlsv1.3. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--compressed-ssh"
      ],
      "description": "(SCP SFTP) Enables built-in SSH compression. This is a request, not an order; the server may or may not do it. Example:  curl --compressed-ssh sftp://example.com/  See also --compressed. Added in 7.56.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--compressed"
      ],
      "description": "(HTTP) Request a compressed response using one of the algorithms curl supports, and automatically decompress the content. Headers are not modified. If this option is used and the server sends an unsupported encoding, curl will report an error. This is a request, not an order; the server may or may not deliver data compressed.  Example:  curl --compressed https://example.com  See also --compressed-ssh. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-K",
        "--config"
      ],
      "description": "Specify a text file to read curl arguments from. The command line arguments found in the text file will be used as if they were provided on the command line.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--connect-timeout"
      ],
      "description": "Maximum time in seconds that you allow curl's connection to take. This only limits the connection phase, so if curl connects within the given period it will continue - if not it will exit. Since version 7.32.0, this option accepts decimal values. If this option is used several times, the last one will be used.  Examples:  curl --connect-timeout 20 https://example.com curl --connect-timeout 3.14 https://example.com  See also -m, --max-time. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--connect-to"
      ],
      "description": "",
      "takes_argument": true
    },
    {
      "aliases": [
        "-C",
        "--continue-at"
      ],
      "description": "Continue/Resume a previous file transfer at the given offset. The given offset is the exact number of bytes that will be skipped, counting from the beginning of the source file before it is transferred to the destination. If used with uploads, the FTP server command SIZE will not be used by curl. Use \"-C -\" to tell curl to automatically find out where/how to resume the transfer. It then uses the given output/input files to figure that out. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-c",
        "--cookie-jar"
      ],
      "description": "(HTTP) Specify to which file you want curl to write all cookies after a completed operation. Curl writes all cookies from its in-memory cookie storage to the given file at the end of operations. If no cookies are known, no data will be written. The file will be written using the Netscape cookie file format. If you set the file name to a single dash, \"-\", the cookies will be written to stdout.",
      "takes_argument": true
    },
    {
      "aliases": [
        "-b",
        "--cookie"
      ],
      "description": "(HTTP) Pass the data to the HTTP server in the Cookie header. It is supposedly the data previously received from the server in a \"Set-Cookie:\" line. The data should be in the format \"NAME1=VALUE1; NAME2=VALUE2\". This makes curl use the cookie header with this content explicitly in all outgoing request(s). If multiple requests are done due to authentication, followed redirects or similar, they will all get this cookie passed on.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--create-dirs"
      ],
      "description": "When used in conjunction with the --output option, curl will create the necessary local directory hierarchy as needed. This option creates the directories mentioned with the --output option, nothing else. If the --output file name uses no directory, or if the directories it mentions already exist, no directories will be created. Created dirs are made with mode 0750 on unix style file systems.  To create remote directories when using FTP or SFTP, try --ftp-create-dirs.  Example: ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--create-file-mode"
      ],
      "description": "(SFTP SCP FILE) When curl is used to create files remotely using one of the supported protocols, this option allows the user to set which 'mode' to set on the file at creation time, instead of the default 0644. This option takes an octal number as argument.  If this option is used several times, the last one will be used.  Example:  curl --create-file-mode 0777 -T localfile sftp://example.com/new  See also --ftp-create-dirs. Added in 7.75.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--crlf"
      ],
      "description": "(FTP SMTP) Convert LF to CRLF in upload. Useful for MVS (OS/390). (SMTP added in 7.40.0)  Example:  curl --crlf -T file ftp://example.com/  See also -B, --use-ascii. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--crlfile"
      ],
      "description": "(TLS) Provide a file using PEM format with a Certificate Revocation List that may specify peer certificates that are to be considered revoked. If this option is used several times, the last one will be used.  Example:  curl --crlfile rejects.txt https://example.com  See also --cacert and --capath. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--curves"
      ],
      "description": "(TLS) Tells curl to request specific curves to use during SSL session establishment according to RFC 8422, 5.1. Multiple algorithms can be provided by separating them with \":\" (e.g. \"X25519:P-521\"). The parameter is available identically in the \"openssl s_client/s_server\" utilities. --curves allows a OpenSSL powered curl to make SSL-connections with exactly the (EC) curve requested by the client, avoiding nontransparent client/server negotiations. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--data-ascii"
      ],
      "description": "(HTTP) This is just an alias for -d, --data . Example:  curl --data-ascii @file https://example.com  See also --data-binary, --data-raw and --data-urlencode. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--data-binary"
      ],
      "description": "(HTTP) This posts data exactly as specified with no extra processing whatsoever. If you start the data with the letter @, the rest should be a filename. Data is posted in a similar manner as --data does, except that newlines and carriage returns are preserved and conversions are never done. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--data-raw"
      ],
      "description": "(HTTP) This posts data similarly to --data but without the special interpretation of the @ character. Examples:  curl --data-raw \"hello\" https://example.com curl --data-raw \"@at@at@\" https://example.com  See also -d, --data. Added in 7.43.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--data-urlencode"
      ],
      "description": "(HTTP) This posts data, similar to the other --data options with the exception that this performs URL-encoding. To be CGI-compliant, the <data> part should begin with a name followed by a separator and a content specification. The <data> part can be passed to curl using one of the following syntaxes: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-d",
        "--data"
      ],
      "description": "(HTTP MQTT) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user has filled in an HTML form and presses the submit button. This will cause curl to pass the data to the server using the content-type application/x-www-form-urlencoded. Compare to -F, --form .",
      "takes_argument": true
    },
    {
      "aliases": [
        "--delegation"
      ],
      "description": "(GSS/kerberos) Set LEVEL to tell the server what it is allowed to delegate when it comes to user credentials.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--digest"
      ],
      "description": "(HTTP) Enables HTTP Digest authentication. This is an authentication scheme that prevents the password from being sent over the wire in clear text. Use this in combination with the normal --user option to set user name and password. If this option is used several times, only the first one is used.  Example:  curl -u name:password --digest https://example.com  See also -u, --user, --proxy-digest and --anyauth. This option is mutually exclusive to --basic and --ntlm and --negotiate. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--disable-eprt"
      ],
      "description": "(FTP) Tell curl to disable the use of the EPRT and LPRT commands when doing active FTP transfers. Curl will normally always first attempt to use EPRT, then LPRT before using PORT, but with this option, it will use PORT right away. EPRT and LPRT are extensions to the original FTP protocol, and may not work on all servers, but they enable more functionality in a better way than the traditional PORT command.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--disable-epsv"
      ],
      "description": "(FTP) Tell curl to disable the use of the EPSV command when doing passive FTP transfers. Curl will normally always first attempt to use EPSV before PASV, but with this option, it will not try using EPSV. --epsv can be used to explicitly enable EPSV again and --no-epsv is an alias for --disable-epsv.  If the server is an IPv6 host, this option will have no effect as EPSV is necessary then. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-q",
        "--disable"
      ],
      "description": "If used as the first parameter on the command line, the curlrc config file will not be read and used. See the --config for details on the default config file search path. Example:  curl -q https://example.com  See also -K, --config. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--disallow-username-in-url"
      ],
      "description": "(HTTP) This tells curl to exit if passed a URL containing a username. This is probably most useful when the URL is being provided at runtime or similar. Example:  curl --disallow-username-in-url https://example.com  See also --proto. Added in 7.61.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--dns-interface"
      ],
      "description": "(DNS) Tell curl to send outgoing DNS requests through <interface>. This option is a counterpart to --interface (which does not affect DNS). The supplied string must be an interface name (not an address). Example:  curl --dns-interface eth0 https://example.com  See also --dns-ipv4-addr and --dns-ipv6-addr. --dns-interface requires that the underlying libcurl was built to support c-ares. Added in 7.33.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--dns-ipv4-addr"
      ],
      "description": "(DNS) Tell curl to bind to <ip-address> when making IPv4 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv4 address. If this option is used several times, the last one will be used.  Example:  curl --dns-ipv4-addr 10.1.2.3 https://example.com  See also --dns-interface and --dns-ipv6-addr. --dns-ipv4-addr requires that the underlying libcurl was built to support c-ares. Added in 7.33.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--dns-ipv6-addr"
      ],
      "description": "(DNS) Tell curl to bind to <ip-address> when making IPv6 DNS requests, so that the DNS requests originate from this address. The argument should be a single IPv6 address. If this option is used several times, the last one will be used.  Example:  curl --dns-ipv6-addr 2a04:4e42::561 https://example.com  See also --dns-interface and --dns-ipv4-addr. --dns-ipv6-addr requires that the underlying libcurl was built to support c-ares. Added in 7.33.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--dns-servers"
      ],
      "description": "Set the list of DNS servers to be used instead of the system default. The list of IP addresses should be separated with commas. Port numbers may also optionally be given as :<port-number> after each IP address. If this option is used several times, the last one will be used.  Example:  curl --dns-servers 192.168.0.1,192.168.0.2 https://example.com  See also --dns-interface and --dns-ipv4-addr. --dns-servers requires that the underlying libcurl was built to support c-ares. Added in 7.33.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--doh-cert-status"
      ],
      "description": "Same as --cert-status but used for DoH (DNS-over-HTTPS). Example:  curl --doh-cert-status --doh-url https://doh.example https://example.com  See also --doh-insecure. Added in 7.76.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--doh-insecure"
      ],
      "description": "Same as --insecure but used for DoH (DNS-over-HTTPS). Example:  curl --doh-insecure --doh-url https://doh.example https://example.com  See also --doh-url. Added in 7.76.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--doh-url"
      ],
      "description": "Specifies which DNS-over-HTTPS (DoH) server to use to resolve hostnames, instead of using the default name resolver mechanism. The URL must be HTTPS. Some SSL options that you set for your transfer will apply to DoH since the name lookups take place over SSL. However, the certificate verification settings are not inherited and can be controlled separately via --doh-insecure and --doh-cert-status.  This option is unset if an empty string \"\" is used as the URL. (Added in 7.85.0) ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-D",
        "--dump-header"
      ],
      "description": "(HTTP FTP) Write the received protocol headers to the specified file. If no headers are received, the use of this option will create an empty file. When used in FTP, the FTP server response lines are considered being \"headers\" and thus are saved there.  If this option is used several times, the last one will be used.  Example:  curl --dump-header store.txt https://example.com  See also -o, --output. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--egd-file"
      ],
      "description": "(TLS) Deprecated option. This option is ignored by curl since 7.84.0. Prior to that it only had an effect on curl if built to use old versions of OpenSSL. Specify the path name to the Entropy Gathering Daemon socket. The socket is used to seed the random engine for SSL connections.  Example:  curl --egd-file /random/here https://example.com  See also --random-file. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--engine"
      ],
      "description": "(TLS) Select the OpenSSL crypto engine to use for cipher operations. Use --engine list to print a list of build-time supported engines. Note that not all (and possibly none) of the engines may be available at runtime. Example:  curl --engine flavor https://example.com  See also --ciphers and --curves. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--etag-compare"
      ],
      "description": "(HTTP) This option makes a conditional HTTP request for the specific ETag read from the given file by sending a custom If-None-Match header using the stored ETag. For correct results, make sure that the specified file contains only a single line with the desired ETag. An empty file is parsed as an empty ETag.  Use the option --etag-save to first save the ETag from a response, and then use this option to compare against the saved ETag in a subsequent request.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--etag-save"
      ],
      "description": "(HTTP) This option saves an HTTP ETag to the specified file. An ETag is a caching related header, usually returned in a response. If no ETag is sent by the server, an empty file is created.  Example:  curl --etag-save storetag.txt https://example.com  See also --etag-compare. Added in 7.68.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--expect100-timeout"
      ],
      "description": "(HTTP) Maximum time in seconds that you allow curl to wait for a 100-continue response when curl emits an Expects: 100-continue header in its request. By default curl will wait one second. This option accepts decimal values! When curl stops waiting, it will continue as if the response has been received. Example:  curl --expect100-timeout 2.5 -T file https://example.com  See also --connect-timeout. Added in 7.47.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--fail-early"
      ],
      "description": "Fail and exit on the first detected transfer error. When curl is used to do multiple transfers on the command line, it will attempt to operate on each given URL, one by one. By default, it will ignore errors if there are more URLs given and the last URL's success will determine the error code curl returns. So early failures will be \"hidden\" by subsequent successful transfers. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--fail-with-body"
      ],
      "description": "(HTTP) Return an error on server errors where the HTTP response code is 400 or greater). In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will still allow curl to output and save that content but also to return error 22. This is an alternative option to --fail which makes curl fail for the same circumstances but without saving the content.  Example: ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-f",
        "--fail"
      ],
      "description": "(HTTP) Fail fast with no output at all on server errors. This is useful to enable scripts and users to better deal with failed attempts. In normal cases when an HTTP server fails to deliver a document, it returns an HTML document stating so (which often also describes why and more). This flag will prevent curl from outputting that and return error 22.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--false-start"
      ],
      "description": "(TLS) Tells curl to use false start during the TLS handshake. False start is a mode where a TLS client will start sending application data before verifying the server's Finished message, thus saving a round trip when performing a full handshake. This is currently only implemented in the NSS and Secure Transport (on iOS 7.0 or later, or OS X 10.9 or later) backends.  Example:  curl --false-start https://example.com  See also --tcp-fastopen. Added in 7.42.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--form-escape"
      ],
      "description": "(HTTP) Tells curl to pass on names of multipart form fields and files using backslash-escaping instead of percent-encoding. Example:  curl --form-escape -F 'field\\name=curl' -F 'file=@load\"this' https://example.com  See also -F, --form. Added in 7.81.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--form-string"
      ],
      "description": "(HTTP SMTP IMAP) Similar to --form except that the value string for the named parameter is used literally. Leading '@' and '<' characters, and the ';type=' string in the value have no special meaning. Use this in preference to --form if there's any possibility that the string value may accidentally trigger the '@' or '<' features of -F, --form . Example:  curl --form-string \"data\" https://example.com  See also -F, --form. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-F",
        "--form"
      ],
      "description": "(HTTP SMTP IMAP) For HTTP protocol family, this lets curl emulate a filled-in form in which a user has pressed the submit button. This causes curl to POST data using the Content-Type multipart/form-data according to RFC 2388. For SMTP and IMAP protocols, this is the means to compose a multipart mail message to transmit. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ftp-account"
      ],
      "description": "(FTP) When an FTP server asks for \"account data\" after user name and password has been provided, this data is sent off using the ACCT command. If this option is used several times, the last one will be used.  Example:  curl --ftp-account \"mr.robot\" ftp://example.com/  See also -u, --user. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ftp-alternative-to-user"
      ],
      "description": "(FTP) If authenticating with the USER and PASS commands fails, send this command. When connecting to Tumbleweed's Secure Transport server over FTPS using a client certificate, using \"SITE AUTH\" will tell the server to retrieve the username from the certificate. Example:  curl --ftp-alternative-to-user \"U53r\" ftp://example.com  See also --ftp-account and -u, --user. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ftp-create-dirs"
      ],
      "description": "(FTP SFTP) When an FTP or SFTP URL/operation uses a path that does not currently exist on the server, the standard behavior of curl is to fail. Using this option, curl will instead attempt to create missing directories. Example:  curl --ftp-create-dirs -T file ftp://example.com/remote/path/file  See also --create-dirs. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ftp-method"
      ],
      "description": "(FTP) Control what method curl should use to reach a file on an FTP(S) server. The method argument should be one of the following alternatives:",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ftp-pasv"
      ],
      "description": "(FTP) Use passive mode for the data connection. Passive is the internal default behavior, but using this option can be used to override a previous --ftp-port option. If this option is used several times, only the first one is used. Undoing an enforced passive really is not doable but you must then instead enforce the correct --ftp-port again.  Passive mode means that curl will try the EPSV command first and then PASV, unless --disable-epsv is used.  Example:  curl --ftp-pasv ftp://example.com/ ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-P",
        "--ftp-port"
      ],
      "description": "(FTP) Reverses the default initiator/listener roles when connecting with FTP. This option makes curl use active mode. curl then tells the server to connect back to the client's specified address and port, while passive mode asks the server to setup an IP address and port for it to connect to. <address> should be one of:",
      "takes_argument": true
    },
    {
      "aliases": [
        "-"
      ],
      "description": "make curl pick the same IP address that is already used for the control connection",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ftp-pret"
      ],
      "description": "(FTP) Tell curl to send a PRET command before PASV (and EPSV). Certain FTP servers, mainly drftpd, require this non-standard command for directory listings as well as up and downloads in PASV mode. Example:  curl --ftp-pret ftp://example.com/  See also -P, --ftp-port and --ftp-pasv. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ftp-skip-pasv-ip"
      ],
      "description": "(FTP) Tell curl to not use the IP address the server suggests in its response to curl's PASV command when curl connects the data connection. Instead curl will re-use the same IP address it already uses for the control connection. Since curl 7.74.0 this option is enabled by default.  This option has no effect if PORT, EPRT or EPSV is used instead of PASV.  Example:  curl --ftp-skip-pasv-ip ftp://example.com/  See also --ftp-pasv. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ftp-ssl-ccc-mode"
      ],
      "description": "(FTP) Sets the CCC mode. The passive mode will not initiate the shutdown, but instead wait for the server to do it, and will not reply to the shutdown from the server. The active mode initiates the shutdown and waits for a reply from the server. Example:  curl --ftp-ssl-ccc-mode active --ftp-ssl-ccc ftps://example.com/  See also --ftp-ssl-ccc. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ftp-ssl-ccc"
      ],
      "description": "(FTP) Use CCC (Clear Command Channel) Shuts down the SSL/TLS layer after authenticating. The rest of the control channel communication will be unencrypted. This allows NAT routers to follow the FTP transaction. The default mode is passive. Example:  curl --ftp-ssl-ccc ftps://example.com/  See also --ssl and --ftp-ssl-ccc-mode. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ftp-ssl-control"
      ],
      "description": "(FTP) Require SSL/TLS for the FTP login, clear for transfer. Allows secure authentication, but non-encrypted data transfers for efficiency. Fails the transfer if the server does not support SSL/TLS. Example:  curl --ftp-ssl-control ftp://example.com  See also --ssl. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-G",
        "--get"
      ],
      "description": "When used, this option will make all data specified with -d, --data , --data-binary or --data-urlencode to be used in an HTTP GET request instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator. If used in combination with -I, --head, the POST data will instead be appended to the URL with a HEAD request. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-g",
        "--globoff"
      ],
      "description": "This option switches off the \"URL globbing parser\". When you set this option, you can specify URLs that contain the letters {}[] without having curl itself interpret them. Note that these letters are not normal legal URL contents but they should be encoded according to the URI standard. Example:  curl -g \"https://example.com/{[]}}}}\"  See also -K, --config and -q, --disable. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--happy-eyeballs-timeout-ms"
      ],
      "description": "Happy Eyeballs is an algorithm that attempts to connect to both IPv4 and IPv6 addresses for dual-stack hosts, giving IPv6 a head-start of the specified number of milliseconds. If the IPv6 address cannot be connected to within that time, then a connection attempt is made to the IPv4 address in parallel. The first connection to be established is the one that is used.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--haproxy-protocol"
      ],
      "description": "(HTTP) Send a HAProxy PROXY protocol v1 header at the beginning of the connection. This is used by some load balancers and reverse proxies to indicate the client's true IP address and port. This option is primarily useful when sending test requests to a service that expects this header.  Example:  curl --haproxy-protocol https://example.com  See also -x, --proxy. Added in 7.60.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-I",
        "--head"
      ],
      "description": "(HTTP FTP FILE) Fetch the headers only! HTTP-servers feature the command HEAD which this uses to get nothing but the header of a document. When used on an FTP or FILE file, curl displays the file size and last modification time only. Example:  curl -I https://example.com  See also -G, --get, -v, --verbose and --trace-ascii. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-H",
        "--header"
      ],
      "description": "(HTTP) Extra header to include in the request when sending HTTP to a server. You may specify any number of extra headers. Note that if you should add a custom header that has the same name as one of the internal ones curl would use, your externally set header will be used instead of the internal one. This allows you to make even trickier stuff than curl would normally do. You should not replace internally set headers without knowing perfectly well what you are doing. Remove an internal header by giving a replacement without content on the right side of the colon, as in: -H \"Host:\". If you send the custom header with no-value then its header must be terminated with a semicolon, such as -H \"X-Custom-Header;\" to send \"X-Custom-Header:\".",
      "takes_argument": true
    },
    {
      "aliases": [
        "-h",
        "--help"
      ],
      "description": "Usage help. This lists all commands of the <category>. If no arg was provided, curl will display the most important command line arguments. If the argument \"all\" was provided, curl will display all options available. If the argument \"category\" was provided, curl will display all categories and their meanings. Example:  curl --help all  See also -v, --verbose. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--hostpubmd5"
      ],
      "description": "(SFTP SCP) Pass a string containing 32 hexadecimal digits. The string should be the 128 bit MD5 checksum of the remote host's public key, curl will refuse the connection with the host unless the md5sums match. Example:  curl --hostpubmd5 e5c1c49020640a5ab0f2034854c321a8 sftp://example.com/  See also --hostpubsha256. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--hostpubsha256"
      ],
      "description": "(SFTP SCP) Pass a string containing a Base64-encoded SHA256 hash of the remote host's public key. Curl will refuse the connection with the host unless the hashes match. Example:  curl --hostpubsha256 NDVkMTQxMGQ1ODdmMjQ3MjczYjAyOTY5MmRkMjVmNDQ= sftp://example.com/  See also --hostpubmd5. Added in 7.80.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--hsts"
      ],
      "description": "(HTTPS) This option enables HSTS for the transfer. If the file name points to an existing HSTS cache file, that will be used. After a completed transfer, the cache will be saved to the file name again if it has been modified. Specify a \"\" file name (zero length) to avoid loading/saving and make curl just handle HSTS in memory.  If this option is used several times, curl will load contents from all the files but the last one will be used for saving.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--http0.9"
      ],
      "description": "(HTTP) Tells curl to be fine with HTTP version 0.9 response. HTTP/0.9 is a completely headerless response and therefore you can also connect with this to non-HTTP servers and still get a response since curl will simply transparently downgrade - if allowed.  Since curl 7.66.0, HTTP/0.9 is disabled by default.  Example:  curl --http0.9 https://example.com  See also --http1.1, --http2 and --http3. Added in 7.64.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-0",
        "--http1.0"
      ],
      "description": "(HTTP) Tells curl to use HTTP version 1.0 instead of using its internally preferred HTTP version. Example:  curl --http1.0 https://example.com  See also --http0.9 and --http1.1. This option is mutually exclusive to --http1.1 and --http2 and --http2-prior-knowledge and --http3. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--http1.1"
      ],
      "description": "(HTTP) Tells curl to use HTTP version 1.1. Example:  curl --http1.1 https://example.com  See also -0, --http1.0 and --http0.9. This option is mutually exclusive to -0, --http1.0 and --http2 and --http2-prior-knowledge and --http3. Added in 7.33.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--http2-prior-knowledge"
      ],
      "description": "(HTTP) Tells curl to issue its non-TLS HTTP requests using HTTP/2 without HTTP/1.1 Upgrade. It requires prior knowledge that the server supports HTTP/2 straight away. HTTPS requests will still do HTTP/2 the standard way with negotiated protocol version in the TLS handshake. Example:  curl --http2-prior-knowledge https://example.com ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--http2"
      ],
      "description": "(HTTP) Tells curl to use HTTP version 2. For HTTPS, this means curl will attempt to negotiate HTTP/2 in the TLS handshake. curl does this by default.  For HTTP, this means curl will attempt to upgrade the request to HTTP/2 using the Upgrade: request header.  When curl uses HTTP/2 over HTTPS, it does not itself insist on TLS 1.2 or higher even though that is required by the specification. A user can add this version requirement with --tlsv1.2.  Example:  curl --http2 https://example.com ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--http3"
      ],
      "description": "(HTTP) WARNING : this option is experimental. Do not use in production. Tells curl to use HTTP version 3 directly to the host and port number used in the URL. A normal HTTP/3 transaction will be done to a host and then get redirected via Alt-Svc, but this option allows a user to circumvent that when you know that the target speaks HTTP/3 on the given host and port.  This option will make curl fail if a QUIC connection cannot be established, it cannot fall back to a lower HTTP version on its own. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ignore-content-length"
      ],
      "description": "(FTP HTTP) For HTTP, Ignore the Content-Length header. This is particularly useful for servers running Apache 1.x, which will report incorrect Content-Length for files larger than 2 gigabytes. For FTP (since 7.46.0), skip the RETR command to figure out the size before downloading a file.  This option does not work for HTTP if libcurl was built to use hyper.  Example:  curl --ignore-content-length https://example.com  See also --ftp-skip-pasv-ip. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-i",
        "--include"
      ],
      "description": "Include the HTTP response headers in the output. The HTTP response headers can include things like server name, cookies, date of the document, HTTP version and more... To view the request headers, consider the --verbose option.  Example:  curl -i https://example.com  See also -v, --verbose. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-k",
        "--insecure"
      ],
      "description": "(TLS SFTP SCP) By default, every secure connection curl makes is verified to be secure before the transfer takes place. This option makes curl skip the verification step and proceed without checking.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--interface"
      ],
      "description": "Perform an operation using a specified interface. You can enter interface name, IP address or host name. An example could look like:   curl --interface eth0:1 https://www.example.com/  If this option is used several times, the last one will be used.  On Linux it can be used to specify a VRF, but the binary needs to either have CAP_NET_RAW or to be run as root. More information about Linux VRF: https://www.kernel.org/doc/Documentation/networking/vrf.txt  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-4",
        "--ipv4"
      ],
      "description": "This option tells curl to use IPv4 addresses only, and not for example try IPv6. Example:  curl --ipv4 https://example.com  See also --http1.1 and --http2. This option is mutually exclusive to -6, --ipv6. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-6",
        "--ipv6"
      ],
      "description": "This option tells curl to use IPv6 addresses only, and not for example try IPv4. Example:  curl --ipv6 https://example.com  See also --http1.1 and --http2. This option is mutually exclusive to -4, --ipv4. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--json"
      ],
      "description": "(HTTP) Sends the specified JSON data in a POST request to the HTTP server. --json works as a shortcut for passing on these three options:   --data [arg] --header \"Content-Type: application/json\" --header \"Accept: application/json\"  There is no verification that the passed in data is actual JSON or that the syntax is correct. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-j",
        "--junk-session-cookies"
      ],
      "description": "(HTTP) When curl is told to read cookies from a given file, this option will make it discard all \"session cookies\". This will basically have the same effect as if a new session is started. Typical browsers always discard session cookies when they are closed down. Example:  curl --junk-session-cookies -b cookies.txt https://example.com  See also -b, --cookie and -c, --cookie-jar. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--keepalive-time"
      ],
      "description": "This option sets the time a connection needs to remain idle before sending keepalive probes and the time between individual keepalive probes. It is currently effective on operating systems offering the TCP_KEEPIDLE and TCP_KEEPINTVL socket options (meaning Linux, recent AIX, HP-UX and more). Keepalives are used by the TCP stack to detect broken networks on idle connections. The number of missed keepalive probes before declaring the connection down is OS dependent and is commonly 9 or 10. This option has no effect if --no-keepalive is used.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--key-type"
      ],
      "description": "(TLS) Private key file type. Specify which type your --key provided private key is. DER, PEM, and ENG are supported. If not specified, PEM is assumed. If this option is used several times, the last one will be used.  Example:  curl --key-type DER --key here https://example.com  See also --key. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--key"
      ],
      "description": "(TLS SSH) Private key file name. Allows you to provide your private key in this separate file. For SSH, if not specified, curl tries the following candidates in order: '~/.ssh/id_rsa', '~/.ssh/id_dsa', './id_rsa', './id_dsa'.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--krb"
      ],
      "description": "(FTP) Enable Kerberos authentication and use. The level must be entered and should be one of 'clear', 'safe', 'confidential', or 'private'. Should you use a level that is not one of these, 'private' will instead be used. If this option is used several times, the last one will be used.  Example:  curl --krb clear ftp://example.com/  See also --delegation and --ssl. --krb requires that the underlying libcurl was built to support Kerberos. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--libcurl"
      ],
      "description": "Append this option to any ordinary curl command line, and you will get libcurl-using C source code written to the file that does the equivalent of what your command-line operation does! This option is global and does not need to be specified for each use of -:, --next.  If this option is used several times, the last given file name will be used.  Example:  curl --libcurl client.c https://example.com  See also -v, --verbose. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--limit-rate"
      ],
      "description": "Specify the maximum transfer rate you want curl to use - for both downloads and uploads. This feature is useful if you have a limited pipe and you would like your transfer not to use your entire bandwidth. To make it slower than it otherwise would be.",
      "takes_argument": true
    },
    {
      "aliases": [
        "-l",
        "--list-only"
      ],
      "description": "(FTP POP3) (FTP) When listing an FTP directory, this switch forces a name-only view. This is especially useful if the user wants to machine-parse the contents of an FTP directory since the normal directory view does not use a standard look or format. When used like this, the option causes an NLST command to be sent to the server instead of LIST. Note: Some FTP servers list only files in their response to NLST; they do not include sub-directories and symbolic links. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--local-port"
      ],
      "description": "Set a preferred single number or range (FROM-TO) of local port numbers to use for the connection(s). Note that port numbers by nature are a scarce resource that will be busy at times so setting this range to something too narrow might cause unnecessary connection setup failures. Example:  curl --local-port 1000-3000 https://example.com  See also -g, --globoff. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--location-trusted"
      ],
      "description": "(HTTP) Like -L, --location , but will allow sending the name + password to all hosts that the site may redirect to. This may or may not introduce a security breach if the site redirects you to a site to which you will send your authentication info (which is plaintext in the case of HTTP Basic authentication). Example:  curl --location-trusted -u user:password https://example.com  See also -u, --user. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-L",
        "--location"
      ],
      "description": "(HTTP) If the server reports that the requested page has moved to a different location (indicated with a Location: header and a 3XX response code), this option will make curl redo the request on the new place. If used together with --include or -I, --head",
      "takes_argument": false
    },
    {
      "aliases": [
        "--login-options"
      ],
      "description": "(IMAP LDAP POP3 SMTP) Specify the login options to use during server authentication. You can use login options to specify protocol specific options that may be used during authentication. At present only IMAP, POP3 and SMTP support login options. For more information about login options please see RFC 2384, RFC 5092 and IETF draft draft-earhart-url-smtp-00.txt  If this option is used several times, the last one will be used.  Example:  curl --login-options 'AUTH=*' imap://example.com ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--mail-auth"
      ],
      "description": "(SMTP) Specify a single address. This will be used to specify the authentication address (identity) of a submitted message that is being relayed to another server. Example:  curl --mail-auth user@example.come -T mail smtp://example.com/  See also --mail-rcpt and --mail-from. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--mail-from"
      ],
      "description": "(SMTP) Specify a single address that the given mail should get sent from. Example:  curl --mail-from user@example.com -T mail smtp://example.com/  See also --mail-rcpt and --mail-auth. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--mail-rcpt-allowfails"
      ],
      "description": "(SMTP) When sending data to multiple recipients, by default curl will abort SMTP conversation if at least one of the recipients causes RCPT TO command to return an error. The default behavior can be changed by passing --mail-rcpt-allowfails command-line option which will make curl ignore errors and proceed with the remaining valid recipients. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--mail-rcpt"
      ],
      "description": "(SMTP) Specify a single email address, user name or mailing list name. Repeat this option several times to send to multiple recipients. When performing an address verification (VRFY command), the recipient should be specified as the user name or user name and domain (as per Section 3.5 of RFC5321). (Added in 7.34.0)  When performing a mailing list expand (EXPN command), the recipient should be specified using the mailing list name, such as \"Friends\" or \"London-Office\". (Added in 7.34.0)  Example:",
      "takes_argument": true
    },
    {
      "aliases": [
        "-M",
        "--manual"
      ],
      "description": "Manual. Display the huge help text. Example:  curl --manual  See also -v, --verbose, --libcurl and --trace. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--max-filesize"
      ],
      "description": "(FTP HTTP MQTT) Specify the maximum size (in bytes) of a file to download. If the file requested is larger than this value, the transfer will not start and curl will return with exit code 63. A size modifier may be used. For example, Appending 'k' or 'K' will count the number as kilobytes, 'm' or 'M' makes it megabytes, while 'g' or 'G' makes it gigabytes. Examples: 200K, 3m and 1G. (Added in 7.58.0) ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--max-redirs"
      ],
      "description": "(HTTP) Set maximum number of redirections to follow. When --location is used, to prevent curl from following too many redirects, by default, the limit is set to 50 redirects. Set this option to -1 to make it unlimited. If this option is used several times, the last one will be used.  Example:  curl --max-redirs 3 --location https://example.com  See also -L, --location. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-m",
        "--max-time"
      ],
      "description": "Maximum time in seconds that you allow each transfer to take. This is useful for preventing your batch jobs from hanging for hours due to slow networks or links going down. Since 7.32.0, this option accepts decimal values, but the actual timeout will decrease in accuracy as the specified timeout increases in decimal precision.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--metalink"
      ],
      "description": "This option was previously used to specify a metalink resource. Metalink support has been disabled in curl since 7.78.0 for security reasons. Example:  curl --metalink file https://example.com  See also -Z, --parallel. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--negotiate"
      ],
      "description": "(HTTP) Enables Negotiate (SPNEGO) authentication. This option requires a library built with GSS-API or SSPI support. Use --version to see if your curl supports GSS-API/SSPI or SPNEGO.  When using this option, you must also provide a fake --user option to activate the authentication code properly. Sending a '-u :' is enough as the user name and password from the --user option are not actually used.  If this option is used several times, only the first one is used.  Example: ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--netrc-file"
      ],
      "description": "This option is similar to -n, --netrc , except that you provide the path (absolute or relative) to the netrc file that curl should use. You can only specify one netrc file per invocation. If several --netrc-file options are provided, the last one will be used. It will abide by --netrc-optional if specified.  Example:  curl --netrc-file netrc https://example.com  See also -n, --netrc, -u, --user and -K, --config. This option is mutually exclusive to -n, --netrc. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--netrc-optional"
      ],
      "description": "Similar to -n, --netrc , but this option makes the .netrc usage optional and not mandatory as the --netrc option does. Example:  curl --netrc-optional https://example.com  See also --netrc-file. This option is mutually exclusive to -n, --netrc. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-n",
        "--netrc"
      ],
      "description": "Makes curl scan the .netrc ( _netrc on Windows) file in the user's home directory for login name and password. This is typically used for FTP on Unix. If used with HTTP, curl will enable user authentication. See netrc(5) and ftp(1) for details on the file format. Curl will not complain if that file does not have the right permissions (it should be neither world- nor group-readable). The environment variable \"HOME\" is used to find the home directory.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-:",
        "--next"
      ],
      "description": "Tells curl to use a separate operation for the following URL and associated options. This allows you to send several URL requests, each with their own specific options, for example, such as different user names or custom requests for each. --next will reset all local options and only global ones will have their values survive over to the operation following the --next instruction. Global options include -v, --verbose, --trace, --trace-ascii and --fail-early. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-alpn"
      ],
      "description": "(HTTPS) Disable the ALPN TLS extension. ALPN is enabled by default if libcurl was built with an SSL library that supports ALPN. ALPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions. Example:  curl --no-alpn https://example.com  See also --no-npn and --http2. --no-alpn requires that the underlying libcurl was built to support TLS. Added in 7.36.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-N",
        "--no-buffer"
      ],
      "description": "Disables the buffering of the output stream. In normal work situations, curl will use a standard buffered output stream that will have the effect that it will output the data in chunks, not necessarily exactly when the data arrives. Using this option will disable that buffering. Note that this is the negated option name documented. You can thus use --buffer to enforce the buffering.  Example:  curl --no-buffer https://example.com  See also -#, --progress-bar. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-clobber"
      ],
      "description": "When used in conjunction with the -o, --output , -J, --remote-header-name , -O, --remote-name , or --remote-name-all options, curl avoids overwriting files that already exist. Instead, a dot and a number gets appended to the name of the file that would be created, up to filename.100 after which it will not create any file. Note that this is the negated option name documented. You can thus use --clobber to enforce the clobbering, even if --remote-header-name or -J is specified.  Example: ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-keepalive"
      ],
      "description": "Disables the use of keepalive messages on the TCP connection. curl otherwise enables them by default. Note that this is the negated option name documented. You can thus use --keepalive to enforce keepalive.  Example:  curl --no-keepalive https://example.com  See also --keepalive-time. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-npn"
      ],
      "description": "(HTTPS) Disable the NPN TLS extension. NPN is enabled by default if libcurl was built with an SSL library that supports NPN. NPN is used by a libcurl that supports HTTP/2 to negotiate HTTP/2 support with the server during https sessions. Example:  curl --no-npn https://example.com  See also --no-alpn and --http2. --no-npn requires that the underlying libcurl was built to support TLS. Added in 7.36.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-progress-meter"
      ],
      "description": "Option to switch off the progress meter output without muting or otherwise affecting warning and informational messages like --silent does. Note that this is the negated option name documented. You can thus use --progress-meter to enable the progress meter again.  Example:  curl --no-progress-meter -o store https://example.com  See also -v, --verbose and -s, --silent. Added in 7.67.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-sessionid"
      ],
      "description": "(TLS) Disable curl's use of SSL session-ID caching. By default all transfers are done using the cache. Note that while nothing should ever get hurt by attempting to reuse SSL session-IDs, there seem to be broken SSL implementations in the wild that may require you to disable this in order for you to succeed. Note that this is the negated option name documented. You can thus use --sessionid to enforce session-ID caching.  Example:  curl --no-sessionid https://example.com  See also -k, --insecure. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--noproxy"
      ],
      "description": "Comma-separated list of hosts for which not to use a proxy, if one is specified. The only wildcard is a single * character, which matches all hosts, and effectively disables the proxy. Each name in this list is matched as either a domain which contains the hostname, or the hostname itself. For example, local.com would match local.com, local.com:80, and www.local.com, but not www.notlocal.com.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ntlm-wb"
      ],
      "description": "(HTTP) Enables NTLM much in the style --ntlm does, but hand over the authentication to the separate binary ntlmauth application that is executed when needed. Example:  curl --ntlm-wb -u user:password https://example.com  See also --ntlm and --proxy-ntlm. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ntlm"
      ],
      "description": "(HTTP) Enables NTLM authentication. The NTLM authentication method was designed by Microsoft and is used by IIS web servers. It is a proprietary protocol, reverse-engineered by clever people and implemented in curl based on their efforts. This kind of behavior should not be endorsed, you should encourage everyone who uses NTLM to switch to a public and documented authentication method instead, such as Digest. If you want to enable NTLM for your proxy authentication, then use --proxy-ntlm. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--oauth2-bearer"
      ],
      "description": "(IMAP LDAP POP3 SMTP HTTP) Specify the Bearer Token for OAUTH 2.0 server authentication. The Bearer Token is used in conjunction with the user name which can be specified as part of the --url or --user options. The Bearer Token and user name are formatted according to RFC 6750.  If this option is used several times, the last one will be used.  Example:  curl --oauth2-bearer \"mF_9.B5f-4.1JqM\" https://example.com  See also --basic, --ntlm and --digest. Added in 7.33.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--output-dir"
      ],
      "description": " This option specifies the directory in which files should be stored, when --remote-name or --output are used.  The given output directory is used for all URLs and output options on the command line, up until the first -:, --next.  If the specified target directory does not exist, the operation will fail unless --create-dirs is also used.  If this option is used multiple times, the last specified directory will be used.  Example:  curl --output-dir \"tmp\" -O https://example.com ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-o",
        "--output"
      ],
      "description": "Write output to <file> instead of stdout. If you are using {} or [] to fetch multiple documents, you should quote the URL and you can use '#' followed by a number in the <file> specifier. That variable will be replaced with the current string for the URL being fetched. Like in:   curl \"http://{one,two}.example.com\" -o \"file_#1.txt\"  or use several variables like:    curl \"http://{site,host}.host[1-5].com\" -o \"#1_#2\" ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--parallel-immediate"
      ],
      "description": "When doing parallel transfers, this option will instruct curl that it should rather prefer opening up more connections in parallel at once rather than waiting to see if new transfers can be added as multiplexed streams on another connection. This option is global and does not need to be specified for each use of -:, --next.  Example:  curl --parallel-immediate -Z https://example.com -o file1 https://example.com -o file2  See also -Z, --parallel and --parallel-max. Added in 7.68.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--parallel-max"
      ],
      "description": "When asked to do parallel transfers, using -Z, --parallel , this option controls the maximum amount of transfers to do simultaneously. This option is global and does not need to be specified for each use of -:, --next.  The default is 50.  Example:  curl --parallel-max 100 -Z https://example.com ftp://example.com/  See also -Z, --parallel. Added in 7.66.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-Z",
        "--parallel"
      ],
      "description": "Makes curl perform its transfers in parallel as compared to the regular serial manner. This option is global and does not need to be specified for each use of -:, --next.  Example:  curl --parallel https://example.com -o file1 https://example.com -o file2  See also -:, --next and -v, --verbose. Added in 7.66.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pass"
      ],
      "description": "(SSH TLS) Passphrase for the private key. If this option is used several times, the last one will be used.  Example:  curl --pass secret --key file https://example.com  See also --key and -u, --user. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--path-as-is"
      ],
      "description": "Tell curl to not handle sequences of /../ or /./ in the given URL path. Normally curl will squash or merge them according to standards but with this option set you tell it not to do that. Example:  curl --path-as-is https://example.com/../../etc/passwd  See also --request-target. Added in 7.42.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pinnedpubkey"
      ],
      "description": "(TLS) Tells curl to use the specified public key file (or hashes) to verify the peer. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--post301"
      ],
      "description": "(HTTP) Tells curl to respect RFC 7231/6.4.2 and not convert POST requests into GET requests when following a 301 redirection. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location . Example:  curl --post301 --location -d \"data\" https://example.com  See also --post302, --post303 and -L, --location. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--post302"
      ],
      "description": "(HTTP) Tells curl to respect RFC 7231/6.4.3 and not convert POST requests into GET requests when following a 302 redirection. The non-RFC behavior is ubiquitous in web browsers, so curl does the conversion by default to maintain consistency. However, a server may require a POST to remain a POST after such a redirection. This option is meaningful only when using -L, --location . Example:  curl --post302 --location -d \"data\" https://example.com  See also --post301, --post303 and -L, --location. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--post303"
      ],
      "description": "(HTTP) Tells curl to violate RFC 7231/6.4.4 and not convert POST requests into GET requests when following 303 redirections. A server may require a POST to remain a POST after a 303 redirection. This option is meaningful only when using -L, --location . Example:  curl --post303 --location -d \"data\" https://example.com  See also --post302, --post301 and -L, --location. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--preproxy"
      ],
      "description": "Use the specified SOCKS proxy before connecting to an HTTP or HTTPS -x, --proxy . In such a case curl first connects to the SOCKS proxy and then connects (through SOCKS) to the HTTP or HTTPS proxy. Hence pre proxy. The pre proxy string should be specified with a protocol:// prefix to specify alternative proxy protocols. Use socks4://, socks4a://, socks5:// or socks5h:// to request the specific SOCKS version to be used. No protocol specified will make curl default to SOCKS4. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-#",
        "--progress-bar"
      ],
      "description": "Make curl display transfer progress as a simple progress bar instead of the standard, more informational, meter. This progress bar draws a single line of '#' characters across the screen and shows a percentage if the transfer size is known. For transfers without a known size, there will be space ship (-=o=-) that moves back and forth but only while data is being transferred, with a set of flying hash sign symbols on top. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proto-default"
      ],
      "description": "Tells curl to use protocol for any URL missing a scheme name. An unknown or unsupported protocol causes error CURLE_UNSUPPORTED_PROTOCOL (1).  This option does not change the default proxy protocol (http).  Without this option set, curl guesses protocol based on the host name, see --url for details.  Example:  curl --proto-default https ftp.example.com  See also --proto and --proto-redir. Added in 7.45.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proto-redir"
      ],
      "description": "Tells curl to limit what protocols it may use on redirect. Protocols denied by --proto are not overridden by this option. See --proto for how protocols are represented. Example, allow only HTTP and HTTPS on redirect:    curl --proto-redir -all,http,https http://example.com  By default curl will only allow HTTP, HTTPS, FTP and FTPS on redirect (since 7.65.2). Specifying all or +all enables all protocols on redirects, which is not good for security.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proto"
      ],
      "description": "Tells curl to limit what protocols it may use for transfers. Protocols are evaluated left to right, are comma separated, and are each a protocol name or 'all', optionally prefixed by zero or more modifiers. Available modifiers are:",
      "takes_argument": true
    },
    {
      "aliases": [
        "-"
      ],
      "description": "Deny this protocol, removing it from the list of protocols already permitted.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proto"
      ],
      "description": "uses the default protocols, but disables ftps",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proto"
      ],
      "description": "only enables http and https",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proto"
      ],
      "description": "also only enables http and https",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-anyauth"
      ],
      "description": "Tells curl to pick a suitable authentication method when communicating with the given HTTP proxy. This might cause an extra request/response round-trip. Example:  curl --proxy-anyauth --proxy-user user:passwd -x proxy https://example.com  See also -x, --proxy, --proxy-basic and --proxy-digest. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-basic"
      ],
      "description": "Tells curl to use HTTP Basic authentication when communicating with the given proxy. Use --basic for enabling HTTP Basic with a remote host. Basic is the default authentication method curl uses with proxies. Example:  curl --proxy-basic --proxy-user user:passwd -x proxy https://example.com  See also -x, --proxy, --proxy-anyauth and --proxy-digest. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-cacert"
      ],
      "description": "Same as --cacert but used in HTTPS proxy context. Example:  curl --proxy-cacert CA-file.txt -x https://proxy https://example.com  See also --proxy-capath, --cacert, --capath and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-capath"
      ],
      "description": "Same as --capath but used in HTTPS proxy context. Example:  curl --proxy-capath /local/directory -x https://proxy https://example.com  See also --proxy-cacert, -x, --proxy and --capath. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-cert-type"
      ],
      "description": "Same as --cert-type but used in HTTPS proxy context. Example:  curl --proxy-cert-type PEM --proxy-cert file -x https://proxy https://example.com  See also --proxy-cert. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-cert"
      ],
      "description": "Same as --cert but used in HTTPS proxy context. Example:  curl --proxy-cert file -x https://proxy https://example.com  See also --proxy-cert-type. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-ciphers"
      ],
      "description": "Same as --ciphers but used in HTTPS proxy context. Example:  curl --proxy-ciphers ECDHE-ECDSA-AES256-CCM8 -x https://proxy https://example.com  See also --ciphers, --curves and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-crlfile"
      ],
      "description": "Same as --crlfile but used in HTTPS proxy context. Example:  curl --proxy-crlfile rejects.txt -x https://proxy https://example.com  See also --crlfile and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-digest"
      ],
      "description": "Tells curl to use HTTP Digest authentication when communicating with the given proxy. Use --digest for enabling HTTP Digest with a remote host. Example:  curl --proxy-digest --proxy-user user:passwd -x proxy https://example.com  See also -x, --proxy, --proxy-anyauth and --proxy-basic. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-header"
      ],
      "description": "(HTTP) Extra header to include in the request when sending HTTP to a proxy. You may specify any number of extra headers. This is the equivalent option to --header but is for proxy communication only like in CONNECT requests when you want a separate header sent to the proxy to what is sent to the actual remote host.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-insecure"
      ],
      "description": "Same as --insecure but used in HTTPS proxy context. Example:  curl --proxy-insecure -x https://proxy https://example.com  See also -x, --proxy and -k, --insecure. Added in 7.52.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-key-type"
      ],
      "description": "Same as --key-type but used in HTTPS proxy context. Example:  curl --proxy-key-type DER --proxy-key here -x https://proxy https://example.com  See also --proxy-key and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-key"
      ],
      "description": "Same as --key but used in HTTPS proxy context. Example:  curl --proxy-key here -x https://proxy https://example.com  See also --proxy-key-type and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-negotiate"
      ],
      "description": "Tells curl to use HTTP Negotiate (SPNEGO) authentication when communicating with the given proxy. Use --negotiate for enabling HTTP Negotiate (SPNEGO) with a remote host. Example:  curl --proxy-negotiate --proxy-user user:passwd -x proxy https://example.com  See also --proxy-anyauth and --proxy-basic. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-ntlm"
      ],
      "description": "Tells curl to use HTTP NTLM authentication when communicating with the given proxy. Use --ntlm for enabling NTLM with a remote host. Example:  curl --proxy-ntlm --proxy-user user:passwd -x http://proxy https://example.com  See also --proxy-negotiate and --proxy-anyauth. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-pass"
      ],
      "description": "Same as --pass but used in HTTPS proxy context. Example:  curl --proxy-pass secret --proxy-key here -x https://proxy https://example.com  See also -x, --proxy and --proxy-key. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-pinnedpubkey"
      ],
      "description": "(TLS) Tells curl to use the specified public key file (or hashes) to verify the proxy. This can be a path to a file which contains a single public key in PEM or DER format, or any number of base64 encoded sha256 hashes preceded by 'sha256//' and separated by ';'.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-service-name"
      ],
      "description": "This option allows you to change the service name for proxy negotiation. Example:  curl --proxy-service-name \"shrubbery\" -x proxy https://example.com  See also --service-name and -x, --proxy. Added in 7.43.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-ssl-allow-beast"
      ],
      "description": "Same as --ssl-allow-beast but used in HTTPS proxy context. Example:  curl --proxy-ssl-allow-beast -x https://proxy https://example.com  See also --ssl-allow-beast and -x, --proxy. Added in 7.52.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-ssl-auto-client-cert"
      ],
      "description": "Same as --ssl-auto-client-cert but used in HTTPS proxy context. Example:  curl --proxy-ssl-auto-client-cert -x https://proxy https://example.com  See also --ssl-auto-client-cert and -x, --proxy. Added in 7.77.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--proxy-tls13-ciphers"
      ],
      "description": "(TLS) Specifies which cipher suites to use in the connection to your HTTPS proxy when it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:   https://curl.se/docs/ssl-ciphers.html  This option is currently used only when curl is built to use OpenSSL 1.1.1 or later. If you are using a different SSL backend you can try setting TLS 1.3 cipher suites by using the --proxy-ciphers option. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-tlsauthtype"
      ],
      "description": "Same as --tlsauthtype but used in HTTPS proxy context. Example:  curl --proxy-tlsauthtype SRP -x https://proxy https://example.com  See also -x, --proxy and --proxy-tlsuser. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-tlspassword"
      ],
      "description": "Same as --tlspassword but used in HTTPS proxy context. Example:  curl --proxy-tlspassword passwd -x https://proxy https://example.com  See also -x, --proxy and --proxy-tlsuser. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-tlsuser"
      ],
      "description": "Same as --tlsuser but used in HTTPS proxy context. Example:  curl --proxy-tlsuser smith -x https://proxy https://example.com  See also -x, --proxy and --proxy-tlspassword. Added in 7.52.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy-tlsv1"
      ],
      "description": "Same as --tlsv1 but used in HTTPS proxy context. Example:  curl --proxy-tlsv1 -x https://proxy https://example.com  See also -x, --proxy. Added in 7.52.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-U",
        "--proxy-user"
      ],
      "description": "Specify the user name and password to use for proxy authentication. If you use a Windows SSPI-enabled curl binary and do either Negotiate or NTLM authentication then you can tell curl to select the user name and password from your environment by specifying a single colon with this option: \"-U :\". ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-x",
        "--proxy"
      ],
      "description": "Use the specified proxy. The proxy string can be specified with a protocol:// prefix. No protocol specified or http:// will be treated as HTTP proxy. Use socks4://, socks4a://, socks5:// or socks5h:// to request a specific SOCKS version to be used.    Unix domain sockets are supported for socks proxy. Set localhost for the host part. e.g. socks5h://localhost/path/to/socket.sock  HTTPS proxy support via https:// protocol prefix was added in 7.52.0 for OpenSSL, GnuTLS and NSS. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--proxy1.0"
      ],
      "description": "Use the specified HTTP 1.0 proxy. If the port number is not specified, it is assumed at port 1080. The only difference between this and the HTTP proxy option -x, --proxy, is that attempts to use CONNECT through the proxy will specify an HTTP 1.0 protocol instead of the default HTTP 1.1.  Example:  curl --proxy1.0 -x http://proxy https://example.com  See also -x, --proxy, --socks5 and --preproxy. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-p",
        "--proxytunnel"
      ],
      "description": "When an HTTP proxy is used -x, --proxy , this option will make curl tunnel through the proxy. The tunnel approach is made with the HTTP proxy CONNECT request and requires that the proxy allows direct connect to the remote port number curl wants to tunnel through to. To suppress proxy CONNECT response headers when curl is set to output headers use --suppress-connect-headers.  Example:  curl --proxytunnel -x http://proxy https://example.com  See also -x, --proxy. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pubkey"
      ],
      "description": "(SFTP SCP) Public key file name. Allows you to provide your public key in this separate file. If this option is used several times, the last one will be used.  (As of 7.39.0, curl attempts to automatically extract the public key from the private key file, so passing this option is generally not required. Note that this public key extraction requires libcurl to be linked against a copy of libssh2 1.2.8 or higher that is itself linked against OpenSSL.)  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-Q",
        "--quote"
      ],
      "description": "(FTP SFTP) Send an arbitrary command to the remote FTP or SFTP server. Quote commands are sent BEFORE the transfer takes place (just after the initial PWD command in an FTP transfer, to be exact). To make commands take place after a successful transfer, prefix them with a dash '-'. (FTP only) To make commands be sent after curl has changed the working directory, just before the file transfer command(s), prefix the command with a '+'. This is not performed when a directory listing is performed. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--random-file"
      ],
      "description": "Deprecated option. This option is ignored by curl since 7.84.0. Prior to that it only had an effect on curl if built to use old versions of OpenSSL. Specify the path name to file containing what will be considered as random data. The data may be used to seed the random engine for SSL connections.  Example:  curl --random-file rubbish https://example.com  See also --egd-file. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-r",
        "--range"
      ],
      "description": "(HTTP FTP SFTP FILE) Retrieve a byte range (i.e. a partial document) from an HTTP/1.1, FTP or SFTP server or a local FILE. Ranges can be specified in a number of ways.",
      "takes_argument": true
    },
    {
      "aliases": [
        "-500"
      ],
      "description": "specifies the last 500 bytes",
      "takes_argument": false
    },
    {
      "aliases": [
        "--rate"
      ],
      "description": "Specify the maximum transfer frequency you allow curl to use - in number of transfer starts per time unit (sometimes called request rate). Without this option, curl will start the next transfer as fast as possible. If given several URLs and a transfer completes faster than the allowed rate, curl will wait until the next transfer is started to maintain the requested rate. This option has no effect when --parallel is used. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--raw"
      ],
      "description": "(HTTP) When used, it disables all internal HTTP decoding of content or transfer encodings and instead makes them passed on unaltered, raw. Example:  curl --raw https://example.com  See also --tr-encoding. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-e",
        "--referer"
      ],
      "description": "(HTTP) Sends the \"Referrer Page\" information to the HTTP server. This can also be set with the --header flag of course. When used with --location you can append \";auto\" to the --referer URL to make curl automatically set the previous URL when it follows a Location: header. The \";auto\" string can be used alone, even if you do not set an initial -e, --referer . If this option is used several times, the last one will be used.  Examples: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-J",
        "--remote-header-name"
      ],
      "description": "(HTTP) This option tells the --remote-name option to use the server-specified Content-Disposition filename instead of extracting a filename from the URL. If the server-provided file name contains a path, that will be stripped off before the file name is used. The file is saved in the current directory, or in the directory specified with --output-dir. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--remote-name-all"
      ],
      "description": "This option changes the default action for all given URLs to be dealt with as if --remote-name were used for each one. So if you want to disable that for a specific URL after --remote-name-all has been used, you must use \"-o -\" or --no-remote-name. Example:  curl --remote-name-all ftp://example.com/file1 ftp://example.com/file2  See also -O, --remote-name. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-O",
        "--remote-name"
      ],
      "description": "Write output to a local file named like the remote file we get. (Only the file part of the remote file is used, the path is cut off.) The file will be saved in the current working directory. If you want the file saved in a different directory, make sure you change the current working directory before invoking curl with this option or use --output-dir. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-R",
        "--remote-time"
      ],
      "description": "When used, this will make curl attempt to figure out the timestamp of the remote file, and if that is available make the local file get that same timestamp. Example:  curl --remote-time -o foo https://example.com  See also -O, --remote-name and -z, --time-cond. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--remove-on-error"
      ],
      "description": "When curl returns an error when told to save output in a local file, this option removes that saved file before exiting. This prevents curl from leaving a partial file in the case of an error during transfer. If the output is not a file, this option has no effect.  Example:  curl --remove-on-error -o output https://example.com  See also -f, --fail. Added in 7.83.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--request-target"
      ],
      "description": "(HTTP) Tells curl to use an alternative \"target\" (path) instead of using the path as provided in the URL. Particularly useful when wanting to issue HTTP requests without leading slash or other data that does not follow the regular URL pattern, like \"OPTIONS *\". Example:  curl --request-target \"*\" -X OPTIONS https://example.com  See also -X, --request. Added in 7.55.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-X",
        "--request"
      ],
      "description": "(HTTP) Specifies a custom request method to use when communicating with the HTTP server. The specified request method will be used instead of the method otherwise used (which defaults to GET). Read the HTTP 1.1 specification for details and explanations. Common additional HTTP requests include PUT and DELETE, but related technologies like WebDAV offers PROPFIND, COPY, MOVE and more.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--resolve"
      ],
      "description": "Provide a custom address for a specific host and port pair. Using this, you can make the curl requests(s) use a specified address and prevent the otherwise normally resolved address to be used. Consider it a sort of /etc/hosts alternative provided on the command line. The port number should be the number used for the specific protocol the host will be used for. It means you need several entries if you want to provide address for the same host but different ports.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--retry-all-errors"
      ],
      "description": "Retry on any error. This option is used together with --retry . This option is the \"sledgehammer\" of retrying. Do not use this option by default (eg in curlrc), there may be unintended consequences such as sending or receiving duplicate data. Do not use with redirected input or output. You'd be much better off handling your unique problems in shell script. Please read the example below. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--retry-connrefused"
      ],
      "description": "In addition to the other conditions, consider ECONNREFUSED as a transient error too for --retry . This option is used together with --retry. Example:  curl --retry-connrefused --retry https://example.com  See also --retry and --retry-all-errors. Added in 7.52.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--retry-delay"
      ],
      "description": "Make curl sleep this amount of time before each retry when a transfer has failed with a transient error (it changes the default backoff time algorithm between retries). This option is only interesting if --retry is also used. Setting this delay to zero will make curl use the default backoff time. If this option is used several times, the last one will be used.  Example:  curl --retry-delay 5 --retry https://example.com  See also --retry. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--retry-max-time"
      ],
      "description": "The retry timer is reset before the first transfer attempt. Retries will be done as usual (see --retry ) as long as the timer has not reached this given limit. Notice that if the timer has not reached the limit, the request will be made and while performing, it may take longer than this given time period. To limit a single request's maximum time, use -m, --max-time . Set this option to zero to not timeout retries. If this option is used several times, the last one will be used.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--retry"
      ],
      "description": "If a transient error is returned when curl tries to perform a transfer, it will retry this number of times before giving up. Setting the number to 0 makes curl do no retries (which is the default). Transient error means either: a timeout, an FTP 4xx response code or an HTTP 408, 429, 500, 502, 503 or 504 response code.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--sasl-authzid"
      ],
      "description": "Use this authorization identity (authzid), during SASL PLAIN authentication, in addition to the authentication identity (authcid) as specified by -u, --user . If the option is not specified, the server will derive the authzid from the authcid, but if specified, and depending on the server implementation, it may be used to access another user's inbox, that the user has been granted access to, or a shared mailbox for example.  Example:  curl --sasl-authzid zid imap://example.com/ ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--sasl-ir"
      ],
      "description": "Enable initial response in SASL authentication. Example:  curl --sasl-ir imap://example.com/  See also --sasl-authzid. Added in 7.31.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--service-name"
      ],
      "description": "This option allows you to change the service name for SPNEGO. Examples: --negotiate --service-name sockd would use sockd/server-name.  Example:  curl --service-name sockd/server https://example.com  See also --negotiate and --proxy-service-name. Added in 7.43.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-S",
        "--show-error"
      ],
      "description": "When used with -s, --silent , it makes curl show an error message if it fails. This option is global and does not need to be specified for each use of -:, --next.  Example:  curl --show-error --silent https://example.com  See also --no-progress-meter. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-s",
        "--silent"
      ],
      "description": "Silent or quiet mode. Do not show progress meter or error messages. Makes Curl mute. It will still output the data you ask for, potentially even to the terminal/stdout unless you redirect it. Use --show-error in addition to this option to disable progress meter but still show error messages.  Example:  curl -s https://example.com  See also -v, --verbose, --stderr and --no-progress-meter. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--socks4"
      ],
      "description": "Use the specified SOCKS4 proxy. If the port number is not specified, it is assumed at port 1080. Using this socket type make curl resolve the host name and passing the address on to the proxy. To specify proxy on a unix domain socket, use localhost for host, e.g. socks4://localhost/path/to/socket.sock  This option overrides any previous use of -x, --proxy, as they are mutually exclusive. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--socks4a"
      ],
      "description": "Use the specified SOCKS4a proxy. If the port number is not specified, it is assumed at port 1080. This asks the proxy to resolve the host name. To specify proxy on a unix domain socket, use localhost for host, e.g. socks4a://localhost/path/to/socket.sock  This option overrides any previous use of -x, --proxy, as they are mutually exclusive.  This option is superfluous since you can specify a socks4a proxy with --proxy using a socks4a:// protocol prefix. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--socks5-basic"
      ],
      "description": "Tells curl to use username/password authentication when connecting to a SOCKS5 proxy. The username/password authentication is enabled by default. Use --socks5-gssapi to force GSS-API authentication to SOCKS5 proxies. Example:  curl --socks5-basic --socks5 hostname:4096 https://example.com  See also --socks5. Added in 7.55.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--socks5-gssapi-nec"
      ],
      "description": "As part of the GSS-API negotiation a protection mode is negotiated. RFC 1961 says in section 4.3/4.4 it should be protected, but the NEC reference implementation does not. The option --socks5-gssapi-nec allows the unprotected exchange of the protection mode negotiation. Example:  curl --socks5-gssapi-nec --socks5 hostname:4096 https://example.com  See also --socks5. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--socks5-gssapi-service"
      ],
      "description": "The default service name for a socks server is rcmd/server-fqdn. This option allows you to change it. Examples: --socks5 proxy-name --socks5-gssapi-service sockd would use sockd/proxy-name --socks5 proxy-name --socks5-gssapi-service sockd/real-name would use sockd/real-name for cases where the proxy-name does not match the principal name.  Example:  curl --socks5-gssapi-service sockd --socks5 hostname:4096 https://example.com  See also --socks5. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--socks5-gssapi"
      ],
      "description": "Tells curl to use GSS-API authentication when connecting to a SOCKS5 proxy. The GSS-API authentication is enabled by default (if curl is compiled with GSS-API support). Use --socks5-basic to force username/password authentication to SOCKS5 proxies. Example:  curl --socks5-gssapi --socks5 hostname:4096 https://example.com  See also --socks5. Added in 7.55.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--socks5-hostname"
      ],
      "description": "Use the specified SOCKS5 proxy (and let the proxy resolve the host name). If the port number is not specified, it is assumed at port 1080. To specify proxy on a unix domain socket, use localhost for host, e.g. socks5h://localhost/path/to/socket.sock  This option overrides any previous use of -x, --proxy, as they are mutually exclusive.  This option is superfluous since you can specify a socks5 hostname proxy with --proxy using a socks5h:// protocol prefix. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--socks5"
      ],
      "description": "Use the specified SOCKS5 proxy - but resolve the host name locally. If the port number is not specified, it is assumed at port 1080. To specify proxy on a unix domain socket, use localhost for host, e.g. socks5://localhost/path/to/socket.sock  This option overrides any previous use of -x, --proxy, as they are mutually exclusive.  This option is superfluous since you can specify a socks5 proxy with --proxy using a socks5:// protocol prefix. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-Y",
        "--speed-limit"
      ],
      "description": "If a transfer is slower than this given speed (in bytes per second) for speed-time seconds it gets aborted. speed-time is set with --speed-time and is 30 if not set. If this option is used several times, the last one will be used.  Example:  curl --speed-limit 300 --speed-time 10 https://example.com  See also -y, --speed-time, --limit-rate and -m, --max-time. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-y",
        "--speed-time"
      ],
      "description": "If a transfer runs slower than speed-limit bytes per second during a speed-time period, the transfer is aborted. If speed-time is used, the default speed-limit will be 1 unless set with -Y, --speed-limit . This option controls transfers (in both directions) but will not affect slow connects etc. If this is a concern for you, try the --connect-timeout option.  If this option is used several times, the last one will be used.  Example:  curl --speed-limit 300 --speed-time 10 https://example.com ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ssl-allow-beast"
      ],
      "description": "This option tells curl to not work around a security flaw in the SSL3 and TLS1.0 protocols known as BEAST. If this option is not used, the SSL layer may use workarounds known to cause interoperability problems with some older SSL implementations. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that.  Example:  curl --ssl-allow-beast https://example.com  See also --proxy-ssl-allow-beast and -k, --insecure. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ssl-auto-client-cert"
      ],
      "description": "Tell libcurl to automatically locate and use a client certificate for authentication, when requested by the server. This option is only supported for Schannel (the native Windows SSL library). Prior to 7.77.0 this was the default behavior in libcurl with Schannel. Since the server can request any certificate that supports client authentication in the OS certificate store it could be a privacy violation and unexpected. Example:  curl --ssl-auto-client-cert https://example.com ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ssl-no-revoke"
      ],
      "description": "(Schannel) This option tells curl to disable certificate revocation checks. WARNING: this option loosens the SSL security, and by using this flag you ask for exactly that. Example:  curl --ssl-no-revoke https://example.com  See also --crlfile. Added in 7.44.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ssl-reqd"
      ],
      "description": "(FTP IMAP POP3 SMTP LDAP) Require SSL/TLS for the connection. Terminates the connection if the server does not support SSL/TLS. This option is handled in LDAP since version 7.81.0. It is fully supported by the openldap backend and rejected by the generic ldap backend if explicit TLS is required.  This option was formerly known as --ftp-ssl-reqd.  Example:  curl --ssl-reqd ftp://example.com  See also --ssl and -k, --insecure. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ssl-revoke-best-effort"
      ],
      "description": "(Schannel) This option tells curl to ignore certificate revocation checks when they failed due to missing/offline distribution points for the revocation check lists. Example:  curl --ssl-revoke-best-effort https://example.com  See also --crlfile and -k, --insecure. Added in 7.70.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ssl"
      ],
      "description": "(FTP IMAP POP3 SMTP LDAP) Try to use SSL/TLS for the connection. Reverts to a non-secure connection if the server does not support SSL/TLS. See also --ftp-ssl-control and --ssl-reqd for different levels of encryption required. This option is handled in LDAP since version 7.81.0. It is fully supported by the openldap backend and ignored by the generic ldap backend.  Please note that a server may close the connection if the negotiation does not succeed. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-2",
        "--sslv2"
      ],
      "description": "(SSL) This option previously asked curl to use SSLv2, but starting in curl 7.77.0 this instruction is ignored. SSLv2 is widely considered insecure (see RFC 6176). Example:  curl --sslv2 https://example.com  See also --http1.1 and --http2. -2, --sslv2 requires that the underlying libcurl was built to support TLS. This option is mutually exclusive to -3, --sslv3 and -1, --tlsv1 and --tlsv1.1 and --tlsv1.2. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-3",
        "--sslv3"
      ],
      "description": "(SSL) This option previously asked curl to use SSLv3, but starting in curl 7.77.0 this instruction is ignored. SSLv3 is widely considered insecure (see RFC 7568). Example:  curl --sslv3 https://example.com  See also --http1.1 and --http2. -3, --sslv3 requires that the underlying libcurl was built to support TLS. This option is mutually exclusive to -2, --sslv2 and -1, --tlsv1 and --tlsv1.1 and --tlsv1.2. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--stderr"
      ],
      "description": "Redirect all writes to stderr to the specified file instead. If the file name is a plain '-', it is instead written to stdout. This option is global and does not need to be specified for each use of -:, --next.  If this option is used several times, the last one will be used.  Example:  curl --stderr output.txt https://example.com  See also -v, --verbose and -s, --silent. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--styled-output"
      ],
      "description": "Enables the automatic use of bold font styles when writing HTTP headers to the terminal. Use --no-styled-output to switch them off. This option is global and does not need to be specified for each use of -:, --next.  Example:  curl --styled-output -I https://example.com  See also -I, --head and -v, --verbose. Added in 7.61.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--suppress-connect-headers"
      ],
      "description": "When --proxytunnel is used and a CONNECT request is made do not output proxy CONNECT response headers. This option is meant to be used with --dump-header or --include which are used to show protocol headers in the output. It has no effect on debug options such as --verbose or --trace , or any statistics. Example:  curl --suppress-connect-headers --include -x proxy https://example.com  See also -D, --dump-header, -i, --include and -p, --proxytunnel. Added in 7.54.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tcp-fastopen"
      ],
      "description": "Enable use of TCP Fast Open (RFC7413). Example:  curl --tcp-fastopen https://example.com  See also --false-start. Added in 7.49.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tcp-nodelay"
      ],
      "description": "Turn on the TCP_NODELAY option. See the curl_easy_setopt(3) man page for details about this option. Since 7.50.2, curl sets this option by default and you need to explicitly switch it off if you do not want it on.  Example:  curl --tcp-nodelay https://example.com  See also -N, --no-buffer. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-t",
        "--telnet-option"
      ],
      "description": "Pass options to the telnet protocol. Supported options are: TTYPE=<term> Sets the terminal type.  XDISPLOC=<X display> Sets the X display location.  NEW_ENV=<var,val> Sets an environment variable.  Example:  curl -t TTYPE=vt100 telnet://example.com/  See also -K, --config. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tftp-blksize"
      ],
      "description": "(TFTP) Set TFTP BLKSIZE option (must be >512). This is the block size that curl will try to use when transferring data to or from a TFTP server. By default 512 bytes will be used. If this option is used several times, the last one will be used.  Example:  curl --tftp-blksize 1024 tftp://example.com/file  See also --tftp-no-options. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tftp-no-options"
      ],
      "description": "(TFTP) Tells curl not to send TFTP options requests. This option improves interop with some legacy servers that do not acknowledge or properly implement TFTP options. When this option is used --tftp-blksize is ignored.  Example:  curl --tftp-no-options tftp://192.168.0.1/  See also --tftp-blksize. Added in 7.48.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-z",
        "--time-cond"
      ],
      "description": "(HTTP FTP) Request a file that has been modified later than the given time and date, or one that has been modified before that time. The <date expression> can be all sorts of date strings or if it does not match any internal ones, it is taken as a filename and tries to get the modification date (mtime) from <file> instead. See the curl_getdate(3) man pages for date expression details.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tls-max"
      ],
      "description": "(SSL) VERSION defines maximum supported TLS version. The minimum acceptable version is set by tlsv1.0, tlsv1.1, tlsv1.2 or tlsv1.3. If the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.   ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tls13-ciphers"
      ],
      "description": "(TLS) Specifies which cipher suites to use in the connection if it negotiates TLS 1.3. The list of ciphers suites must specify valid ciphers. Read up on TLS 1.3 cipher suite details on this URL:   https://curl.se/docs/ssl-ciphers.html  This option is currently used only when curl is built to use OpenSSL 1.1.1 or later. If you are using a different SSL backend you can try setting TLS 1.3 cipher suites by using the --ciphers option.  If this option is used several times, the last one will be used. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tlsauthtype"
      ],
      "description": "Set TLS authentication type. Currently, the only supported option is \"SRP\", for TLS-SRP (RFC 5054). If --tlsuser and --tlspassword are specified but --tlsauthtype is not, then this option defaults to \"SRP\". This option works only if the underlying libcurl is built with TLS-SRP support, which requires OpenSSL or GnuTLS with TLS-SRP support. Example:  curl --tlsauthtype SRP https://example.com  See also --tlsuser. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tlspassword"
      ],
      "description": "Set password for use with the TLS authentication method specified with --tlsauthtype . Requires that --tlsuser also be set. This option does not work with TLS 1.3.  Example:  curl --tlspassword pwd --tlsuser user https://example.com  See also --tlsuser. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tlsuser"
      ],
      "description": "Set username for use with the TLS authentication method specified with --tlsauthtype . Requires that --tlspassword also is set. This option does not work with TLS 1.3.  Example:  curl --tlspassword pwd --tlsuser user https://example.com  See also --tlspassword. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tlsv1.0"
      ],
      "description": "(TLS) Forces curl to use TLS version 1.0 or later when connecting to a remote TLS server. In old versions of curl this option was documented to allow _only_ TLS 1.0. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.  Example:  curl --tlsv1.0 https://example.com  See also --tlsv1.3. Added in 7.34.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tlsv1.1"
      ],
      "description": "(TLS) Forces curl to use TLS version 1.1 or later when connecting to a remote TLS server. In old versions of curl this option was documented to allow _only_ TLS 1.1. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.  Example:  curl --tlsv1.1 https://example.com  See also --tlsv1.3 and --tls-max. Added in 7.34.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tlsv1.2"
      ],
      "description": "(TLS) Forces curl to use TLS version 1.2 or later when connecting to a remote TLS server. In old versions of curl this option was documented to allow _only_ TLS 1.2. That behavior was inconsistent depending on the TLS library. Use --tls-max if you want to set a maximum TLS version.  Example:  curl --tlsv1.2 https://example.com  See also --tlsv1.3 and --tls-max. Added in 7.34.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tlsv1.3"
      ],
      "description": "(TLS) Forces curl to use TLS version 1.3 or later when connecting to a remote TLS server. If the connection is done without TLS, this option has no effect. This includes QUIC-using (HTTP/3) transfers.  Note that TLS 1.3 is not supported by all TLS backends.  Example:  curl --tlsv1.3 https://example.com  See also --tlsv1.2 and --tls-max. Added in 7.52.0. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-1",
        "--tlsv1"
      ],
      "description": "(SSL) Tells curl to use at least TLS version 1.x when negotiating with a remote TLS server. That means TLS version 1.0 or higher Example:  curl --tlsv1 https://example.com  See also --http1.1 and --http2. -1, --tlsv1 requires that the underlying libcurl was built to support TLS. This option is mutually exclusive to --tlsv1.1 and --tlsv1.2 and --tlsv1.3. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--tr-encoding"
      ],
      "description": "(HTTP) Request a compressed Transfer-Encoding response using one of the algorithms curl supports, and uncompress the data while receiving it. Example:  curl --tr-encoding https://example.com  See also --compressed. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--trace-ascii"
      ],
      "description": "Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use \"-\" as filename to have the output sent to stdout. This is similar to --trace, but leaves out the hex part and only shows the ASCII part of the dump. It makes smaller output that might be easier to read for untrained humans.  This option is global and does not need to be specified for each use of -:, --next.  If this option is used several times, the last one will be used.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--trace-time"
      ],
      "description": "Prepends a time stamp to each trace or verbose line that curl displays. This option is global and does not need to be specified for each use of -:, --next.  Example:  curl --trace-time --trace-ascii output https://example.com  See also --trace and -v, --verbose. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "--trace"
      ],
      "description": "Enables a full trace dump of all incoming and outgoing data, including descriptive information, to the given output file. Use \"-\" as filename to have the output sent to stdout. Use \"%\" as filename to have the output sent to stderr. This option is global and does not need to be specified for each use of -:, --next.  If this option is used several times, the last one will be used.  Example:  curl --trace log.txt https://example.com ",
      "takes_argument": true
    },
    {
      "aliases": [
        "--unix-socket"
      ],
      "description": "(HTTP) Connect through this Unix domain socket, instead of using the network. Example:  curl --unix-socket socket-path https://example.com  See also --abstract-unix-socket. Added in 7.40.0. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-T",
        "--upload-file"
      ],
      "description": "This transfers the specified local file to the remote URL. If there is no file part in the specified URL, curl will append the local file name. NOTE that you must use a trailing / on the last directory to really prove to Curl that there is no file name or curl will think that your last directory name is the remote file name to use. That will most likely cause the upload operation to fail. If this is used on an HTTP(S) server, the PUT command will be used.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--url"
      ],
      "description": "Specify a URL to fetch. This option is mostly handy when you want to specify URL(s) in a config file. If the given URL is missing a scheme name (such as \"http://\" or \"ftp://\" etc) then curl will make a guess based on the host. If the outermost sub-domain name matches DICT, FTP, IMAP, LDAP, POP3 or SMTP then that protocol will be used, otherwise HTTP will be used. Since 7.45.0 guessing can be disabled by setting a default protocol, see --proto-default for details. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-B",
        "--use-ascii"
      ],
      "description": "(FTP LDAP) Enable ASCII transfer. For FTP, this can also be enforced by using a URL that ends with \";type=A\". This option causes data sent to stdout to be in text mode for win32 systems. Example:  curl -B ftp://example.com/README  See also --crlf and --data-ascii. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-A",
        "--user-agent"
      ],
      "description": "(HTTP) Specify the User-Agent string to send to the HTTP server. To encode blanks in the string, surround the string with single quote marks. This header can also be set with the --header or the --proxy-header options. If you give an empty argument to -A, --user-agent (\"\"), it will remove the header completely from the request. If you prefer a blank header, you can set it to a single space (\" \").  If this option is used several times, the last one will be used.  Example: ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-u",
        "--user"
      ],
      "description": "Specify the user name and password to use for server authentication. Overrides --netrc and --netrc-optional . If you simply specify the user name, curl will prompt for a password.  The user name and passwords are split up on the first colon, which makes it impossible to use a colon in the user name with this option. The password can, still. ",
      "takes_argument": true
    },
    {
      "aliases": [
        "-v",
        "--verbose"
      ],
      "description": "Makes curl verbose during the operation. Useful for debugging and seeing what's going on \"under the hood\". A line starting with '>' means \"header data\" sent by curl, '<' means \"header data\" received by curl that is hidden in normal cases, and a line starting with '*' means additional info provided by curl. If you only want HTTP headers in the output, --include might be the option you are looking for. ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-V",
        "--version"
      ],
      "description": "Displays information about curl and the libcurl version it uses. The first line includes the full version of curl, libcurl and other 3rd party libraries linked with the executable.  The second line (starts with \"Protocols:\") shows all protocols that libcurl reports to support.  The third line (starts with \"Features:\") shows specific features libcurl reports to offer. Available features include: ",
      "takes_argument": false
    },
    {
      "aliases": [
        "-w",
        "--write-out"
      ],
      "description": "Make curl display information on stdout after a completed transfer. The format is a string that may contain plain text mixed with any number of variables. The format can be specified as a literal \"string\", or you can have curl read the format from a file with \"@filename\" and to tell curl to read the format from stdin you write \"@-\".",
      "takes_argument": true
    },
    {
      "aliases": [
        "--xattr"
      ],
      "description": "When saving output to a file, this option tells curl to store certain file metadata in extended file attributes. Currently, the URL is stored in the xdg.origin.url attribute and, for HTTP, the content type is stored in the mime_type attribute. If the file system does not support extended attributes, a warning is issued. Example:  curl --xattr -o storage https://example.com  See also -R, --remote-time, -w, --write-out and -v, --verbose. ",
      "takes_argument": false
    }
  ],
  "positional_arguments": [
    {
      "name": "[options / URLs]",
      "type": "BASIC"
    }
  ]
}