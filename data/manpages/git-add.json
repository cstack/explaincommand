{
  "command_name": {
    "main_command": "git",
    "subcommand": "add"
  },
  "description": "Add file contents to the index",
  "flags": [
    {
      "aliases": [
        "-n",
        "--dry-run"
      ],
      "description": "Don’t actually add the file(s), just show if they\n  exist and/or will be ignored.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-v",
        "--verbose"
      ],
      "description": "Be verbose.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-f",
        "--force"
      ],
      "description": "Allow adding otherwise ignored files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--sparse"
      ],
      "description": "Allow updating index entries outside of the\n  sparse-checkout cone. Normally, git add refuses to update index entries\n  whose paths do not fit within the sparse-checkout cone, since those files\n  might be removed from the working tree without warning. See\n  git-sparse-checkout(1) for more details.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-i",
        "--interactive"
      ],
      "description": "Add modified contents in the working tree interactively\n  to the index. Optional path arguments may be supplied to limit operation to a\n  subset of the working tree. See “Interactive mode” for\n  details.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-p",
        "--patch"
      ],
      "description": "Interactively choose hunks of patch between the index and\n  the work tree and add them to the index. This gives the user a chance to\n  review the difference before adding modified contents to the index.\nThis effectively runs add --interactive, but bypasses the\n    initial command menu and directly jumps to the patch subcommand. See\n    “Interactive mode” for details.\n",
      "takes_argument": false
    },
    {
      "aliases": [
        "-e",
        "--edit"
      ],
      "description": "Open the diff vs. the index in an editor and let the user\n  edit it. After the editor was closed, adjust the hunk headers and apply the\n  patch to the index.\nThe intent of this option is to pick and choose lines of the patch\n    to apply, or even to modify the contents of lines to be staged. This can be\n    quicker and more flexible than using the interactive hunk selector. However,\n    it is easy to confuse oneself and create a patch that does not apply to the\n    index. See EDITING PATCHES below.\n",
      "takes_argument": false
    },
    {
      "aliases": [
        "-u",
        "--update"
      ],
      "description": "Update the index just where it already has an entry\n  matching <pathspec>. This removes as well as modifies index entries to\n  match the working tree, but adds no new files.\nIf no <pathspec> is given when -u option is used, all\n    tracked files in the entire working tree are updated (old versions of Git\n    used to limit the update to the current directory and its\n  subdirectories).\n",
      "takes_argument": false
    },
    {
      "aliases": [
        "-A",
        "--all",
        "--no-ignore-removal"
      ],
      "description": "Update the index not only where the working tree has a\n  file matching <pathspec> but also where the index already has an entry.\n  This adds, modifies, and removes index entries to match the working tree.\nIf no <pathspec> is given when -A option is used, all\n    files in the entire working tree are updated (old versions of Git used to\n    limit the update to the current directory and its subdirectories).\n",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-all",
        "--ignore-removal"
      ],
      "description": "Update the index by adding new files that are unknown to\n  the index and files modified in the working tree, but ignore files that have\n  been removed from the working tree. This option is a no-op when no\n  <pathspec> is used.\nThis option is primarily to help users who are used to older\n    versions of Git, whose \"git add <pathspec>...\" was a synonym\n    for \"git add --no-all <pathspec>...\", i.e. ignored removed\n    files.\n",
      "takes_argument": false
    },
    {
      "aliases": [
        "-N",
        "--intent-to-add"
      ],
      "description": "Record only the fact that the path will be added later.\n  An entry for the path is placed in the index with no content. This is useful\n  for, among other things, showing the unstaged content of such files with\n  git diff and committing them with git commit -a.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--refresh"
      ],
      "description": "Don’t add the file(s), but only refresh their\n  stat() information in the index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ignore-errors"
      ],
      "description": "If some files could not be added because of errors\n  indexing them, do not abort the operation, but continue adding the others. The\n  command shall still exit with non-zero status. The configuration variable\n  add.ignoreErrors can be set to true to make this the default\n  behaviour.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ignore-missing"
      ],
      "description": "This option can only be used together with --dry-run. By\n  using this option the user can check if any of the given files would be\n  ignored, no matter if they are already present in the work tree or not.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-warn-embedded-repo"
      ],
      "description": "By default, git add will warn when adding an\n  embedded repository to the index without using git submodule add to\n  create an entry in .gitmodules. This option will suppress the warning\n  (e.g., if you are manually performing operations on submodules).",
      "takes_argument": false
    },
    {
      "aliases": [
        "--renormalize"
      ],
      "description": "Apply the \"clean\" process freshly to all\n  tracked files to forcibly add them again to the index. This is useful after\n  changing core.autocrlf configuration or the text attribute in\n  order to correct files added with wrong CRLF/LF line endings. This option\n  implies -u.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--chmod=(+|-)x"
      ],
      "description": "Override the executable bit of the added files. The\n  executable bit is only changed in the index, the files on disk are left\n  unchanged.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pathspec-from-file=<file>"
      ],
      "description": "Pathspec is passed in <file> instead of\n  commandline args. If <file> is exactly - then standard\n  input is used. Pathspec elements are separated by LF or CR/LF. Pathspec\n  elements can be quoted as explained for the configuration variable\n  core.quotePath (see git-config(1)). See also\n  --pathspec-file-nul and global --literal-pathspecs.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pathspec-file-nul"
      ],
      "description": "Only meaningful with --pathspec-from-file.\n  Pathspec elements are separated with NUL character and all other characters\n  are taken literally (including newlines and quotes).",
      "takes_argument": false
    },
    {
      "aliases": [
        "--"
      ],
      "description": "This option can be used to separate command-line options\n  from the list of files, (useful when filenames might be mistaken for\n  command-line options).",
      "takes_argument": false
    }
  ],
  "positional_arguments": [
    {
      "name": "[<pathspec>...]",
      "repeated": true
    }
  ]
}