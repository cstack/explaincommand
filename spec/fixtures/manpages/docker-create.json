{
  "description": "Create a new container",
  "flags": [
    {
      "aliases": [
        "--add-host"
      ],
      "description": "      --add-host list                  Add a custom host-to-IP mapping (host:ip)",
      "takes_argument": true
    },
    {
      "aliases": [
        "-a",
        "--attach"
      ],
      "description": "  -a, --attach list                    Attach to STDIN, STDOUT or STDERR",
      "takes_argument": true
    },
    {
      "aliases": [
        "--blkio-weight"
      ],
      "description": "      --blkio-weight uint16            Block IO (relative weight), between 10 and 1000, or 0 to disable (default 0)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--blkio-weight-device"
      ],
      "description": "      --blkio-weight-device list       Block IO weight (relative device weight) (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cap-add"
      ],
      "description": "      --cap-add list                   Add Linux capabilities",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cap-drop"
      ],
      "description": "      --cap-drop list                  Drop Linux capabilities",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cgroup-parent"
      ],
      "description": "      --cgroup-parent string           Optional parent cgroup for the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cgroupns"
      ],
      "description": "      --cgroupns string                Cgroup namespace to use (host|private)",
      "takes_argument": true
    },
    {
      "aliases": [
        "-cgroupns-mode"
      ],
      "description": "                                                  default-cgroupns-mode option on the daemon (default)",
      "takes_argument": false
    },
    {
      "aliases": [
        "--cidfile"
      ],
      "description": "      --cidfile string                 Write the container ID to the file",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpu-period"
      ],
      "description": "      --cpu-period int                 Limit CPU CFS (Completely Fair Scheduler) period",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpu-quota"
      ],
      "description": "      --cpu-quota int                  Limit CPU CFS (Completely Fair Scheduler) quota",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpu-rt-period"
      ],
      "description": "      --cpu-rt-period int              Limit CPU real-time period in microseconds",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpu-rt-runtime"
      ],
      "description": "      --cpu-rt-runtime int             Limit CPU real-time runtime in microseconds",
      "takes_argument": true
    },
    {
      "aliases": [
        "-c",
        "--cpu-shares"
      ],
      "description": "  -c, --cpu-shares int                 CPU shares (relative weight)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpus"
      ],
      "description": "      --cpus decimal                   Number of CPUs",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpuset-cpus"
      ],
      "description": "      --cpuset-cpus string             CPUs in which to allow execution (0-3, 0,1)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--cpuset-mems"
      ],
      "description": "      --cpuset-mems string             MEMs in which to allow execution (0-3, 0,1)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device"
      ],
      "description": "      --device list                    Add a host device to the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device-cgroup-rule"
      ],
      "description": "      --device-cgroup-rule list        Add a rule to the cgroup allowed devices list",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device-read-bps"
      ],
      "description": "      --device-read-bps list           Limit read rate (bytes per second) from a device (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device-read-iops"
      ],
      "description": "      --device-read-iops list          Limit read rate (IO per second) from a device (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device-write-bps"
      ],
      "description": "      --device-write-bps list          Limit write rate (bytes per second) to a device (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--device-write-iops"
      ],
      "description": "      --device-write-iops list         Limit write rate (IO per second) to a device (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--disable-content-trust"
      ],
      "description": "      --disable-content-trust          Skip image verification (default true)",
      "takes_argument": false
    },
    {
      "aliases": [
        "--dns"
      ],
      "description": "      --dns list                       Set custom DNS servers",
      "takes_argument": true
    },
    {
      "aliases": [
        "--dns-option"
      ],
      "description": "      --dns-option list                Set DNS options",
      "takes_argument": true
    },
    {
      "aliases": [
        "--dns-search"
      ],
      "description": "      --dns-search list                Set custom DNS search domains",
      "takes_argument": true
    },
    {
      "aliases": [
        "--domainname"
      ],
      "description": "      --domainname string              Container NIS domain name",
      "takes_argument": true
    },
    {
      "aliases": [
        "--entrypoint"
      ],
      "description": "      --entrypoint string              Overwrite the default ENTRYPOINT of the image",
      "takes_argument": true
    },
    {
      "aliases": [
        "-e",
        "--env"
      ],
      "description": "  -e, --env list                       Set environment variables",
      "takes_argument": true
    },
    {
      "aliases": [
        "--env-file"
      ],
      "description": "      --env-file list                  Read in a file of environment variables",
      "takes_argument": true
    },
    {
      "aliases": [
        "--expose"
      ],
      "description": "      --expose list                    Expose a port or a range of ports",
      "takes_argument": true
    },
    {
      "aliases": [
        "--gpus",
        "-request"
      ],
      "description": "      --gpus gpu-request               GPU devices to add to the container ('all' to pass all GPUs)",
      "takes_argument": false
    },
    {
      "aliases": [
        "--group-add"
      ],
      "description": "      --group-add list                 Add additional groups to join",
      "takes_argument": true
    },
    {
      "aliases": [
        "--health-cmd"
      ],
      "description": "      --health-cmd string              Command to run to check health",
      "takes_argument": true
    },
    {
      "aliases": [
        "--health-interval"
      ],
      "description": "      --health-interval duration       Time between running the check (ms|s|m|h) (default 0s)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--health-retries"
      ],
      "description": "      --health-retries int             Consecutive failures needed to report unhealthy",
      "takes_argument": true
    },
    {
      "aliases": [
        "--health-start-period"
      ],
      "description": "      --health-start-period duration   Start period for the container to initialize before starting health-retries countdown (ms|s|m|h) (default 0s)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--health-timeout"
      ],
      "description": "      --health-timeout duration        Maximum time to allow one check to run (ms|s|m|h) (default 0s)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--help"
      ],
      "description": "      --help                           Print usage",
      "takes_argument": false
    },
    {
      "aliases": [
        "-h",
        "--hostname"
      ],
      "description": "  -h, --hostname string                Container host name",
      "takes_argument": true
    },
    {
      "aliases": [
        "--init"
      ],
      "description": "      --init                           Run an init inside the container that forwards signals and reaps processes",
      "takes_argument": false
    },
    {
      "aliases": [
        "-i",
        "--interactive"
      ],
      "description": "  -i, --interactive                    Keep STDIN open even if not attached",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ip"
      ],
      "description": "      --ip string                      IPv4 address (e.g., 172.30.100.104)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ip6"
      ],
      "description": "      --ip6 string                     IPv6 address (e.g., 2001:db8::33)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--ipc"
      ],
      "description": "      --ipc string                     IPC mode to use",
      "takes_argument": true
    },
    {
      "aliases": [
        "--isolation"
      ],
      "description": "      --isolation string               Container isolation technology",
      "takes_argument": true
    },
    {
      "aliases": [
        "--kernel-memory"
      ],
      "description": "      --kernel-memory bytes            Kernel memory limit",
      "takes_argument": true
    },
    {
      "aliases": [
        "-l",
        "--label"
      ],
      "description": "  -l, --label list                     Set meta data on a container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--label-file"
      ],
      "description": "      --label-file list                Read in a line delimited file of labels",
      "takes_argument": true
    },
    {
      "aliases": [
        "--link"
      ],
      "description": "      --link list                      Add link to another container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--link-local-ip"
      ],
      "description": "      --link-local-ip list             Container IPv4/IPv6 link-local addresses",
      "takes_argument": true
    },
    {
      "aliases": [
        "--log-driver"
      ],
      "description": "      --log-driver string              Logging driver for the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--log-opt"
      ],
      "description": "      --log-opt list                   Log driver options",
      "takes_argument": true
    },
    {
      "aliases": [
        "--mac-address"
      ],
      "description": "      --mac-address string             Container MAC address (e.g., 92:d0:c6:0a:29:33)",
      "takes_argument": true
    },
    {
      "aliases": [
        "-m",
        "--memory"
      ],
      "description": "  -m, --memory bytes                   Memory limit",
      "takes_argument": true
    },
    {
      "aliases": [
        "--memory-reservation"
      ],
      "description": "      --memory-reservation bytes       Memory soft limit",
      "takes_argument": true
    },
    {
      "aliases": [
        "--memory-swap"
      ],
      "description": "      --memory-swap bytes              Swap limit equal to memory plus swap: '-1' to enable unlimited swap",
      "takes_argument": true
    },
    {
      "aliases": [
        "--memory-swappiness"
      ],
      "description": "      --memory-swappiness int          Tune container memory swappiness (0 to 100) (default -1)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--mount"
      ],
      "description": "      --mount mount                    Attach a filesystem mount to the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--name"
      ],
      "description": "      --name string                    Assign a name to the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--network"
      ],
      "description": "      --network network                Connect a container to a network",
      "takes_argument": true
    },
    {
      "aliases": [
        "--network-alias"
      ],
      "description": "      --network-alias list             Add network-scoped alias for the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--no-healthcheck"
      ],
      "description": "      --no-healthcheck                 Disable any container-specified HEALTHCHECK",
      "takes_argument": false
    },
    {
      "aliases": [
        "--oom-kill-disable"
      ],
      "description": "      --oom-kill-disable               Disable OOM Killer",
      "takes_argument": false
    },
    {
      "aliases": [
        "--oom-score-adj"
      ],
      "description": "      --oom-score-adj int              Tune host's OOM preferences (-1000 to 1000)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--pid"
      ],
      "description": "      --pid string                     PID namespace to use",
      "takes_argument": true
    },
    {
      "aliases": [
        "--pids-limit"
      ],
      "description": "      --pids-limit int                 Tune container pids limit (set -1 for unlimited)",
      "takes_argument": true
    },
    {
      "aliases": [
        "--platform"
      ],
      "description": "      --platform string                Set platform if server is multi-platform capable",
      "takes_argument": true
    },
    {
      "aliases": [
        "--privileged"
      ],
      "description": "      --privileged                     Give extended privileges to this container",
      "takes_argument": false
    },
    {
      "aliases": [
        "-p",
        "--publish"
      ],
      "description": "  -p, --publish list                   Publish a container's port(s) to the host",
      "takes_argument": true
    },
    {
      "aliases": [
        "-P",
        "--publish-all"
      ],
      "description": "  -P, --publish-all                    Publish all exposed ports to random ports",
      "takes_argument": false
    },
    {
      "aliases": [
        "--pull"
      ],
      "description": "      --pull string                    Pull image before creating (\"always\"|\"missing\"|\"never\") (default \"missing\")",
      "takes_argument": true
    },
    {
      "aliases": [
        "--read-only"
      ],
      "description": "      --read-only                      Mount the container's root filesystem as read only",
      "takes_argument": false
    },
    {
      "aliases": [
        "--restart"
      ],
      "description": "      --restart string                 Restart policy to apply when a container exits (default \"no\")",
      "takes_argument": true
    },
    {
      "aliases": [
        "--rm"
      ],
      "description": "      --rm                             Automatically remove the container when it exits",
      "takes_argument": false
    },
    {
      "aliases": [
        "--runtime"
      ],
      "description": "      --runtime string                 Runtime to use for this container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--security-opt"
      ],
      "description": "      --security-opt list              Security Options",
      "takes_argument": true
    },
    {
      "aliases": [
        "--shm-size"
      ],
      "description": "      --shm-size bytes                 Size of /dev/shm",
      "takes_argument": true
    },
    {
      "aliases": [
        "--stop-signal"
      ],
      "description": "      --stop-signal string             Signal to stop a container (default \"SIGTERM\")",
      "takes_argument": true
    },
    {
      "aliases": [
        "--stop-timeout"
      ],
      "description": "      --stop-timeout int               Timeout (in seconds) to stop a container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--storage-opt"
      ],
      "description": "      --storage-opt list               Storage driver options for the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--sysctl"
      ],
      "description": "      --sysctl map                     Sysctl options (default map[])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--tmpfs"
      ],
      "description": "      --tmpfs list                     Mount a tmpfs directory",
      "takes_argument": true
    },
    {
      "aliases": [
        "-t",
        "--tty"
      ],
      "description": "  -t, --tty                            Allocate a pseudo-TTY",
      "takes_argument": false
    },
    {
      "aliases": [
        "--ulimit"
      ],
      "description": "      --ulimit ulimit                  Ulimit options (default [])",
      "takes_argument": true
    },
    {
      "aliases": [
        "-u",
        "--user"
      ],
      "description": "  -u, --user string                    Username or UID (format: <name|uid>[:<group|gid>])",
      "takes_argument": true
    },
    {
      "aliases": [
        "--userns"
      ],
      "description": "      --userns string                  User namespace to use",
      "takes_argument": true
    },
    {
      "aliases": [
        "--uts"
      ],
      "description": "      --uts string                     UTS namespace to use",
      "takes_argument": true
    },
    {
      "aliases": [
        "-v",
        "--volume"
      ],
      "description": "  -v, --volume list                    Bind mount a volume",
      "takes_argument": true
    },
    {
      "aliases": [
        "--volume-driver"
      ],
      "description": "      --volume-driver string           Optional volume driver for the container",
      "takes_argument": true
    },
    {
      "aliases": [
        "--volumes-from"
      ],
      "description": "      --volumes-from list              Mount volumes from the specified container(s)",
      "takes_argument": true
    },
    {
      "aliases": [
        "-w",
        "--workdir"
      ],
      "description": "  -w, --workdir string                 Working directory inside the container",
      "takes_argument": true
    }
  ]
}