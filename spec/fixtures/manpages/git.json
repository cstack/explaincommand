{
  "description": "NAME \ngit - the stupid content tracker",
  "flags": [
    {
      "aliases": [
        "-v",
        "--version"
      ],
      "description": "OPTIONS \n-v, --version \nPrints the Git suite version that the git program came\nfrom.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-h",
        "--help"
      ],
      "description": "-h, --help \nPrints the synopsis and a list of the most commonly used\ncommands. \nIf the option --all or -a is given then all available\ncommands are \nprinted. If a Git command is named this option will bring up\nthe \nmanual page for that command.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-C"
      ],
      "description": "-C <path> \nRun as if git was started in <path> instead of the\ncurrent working \ndirectory. When multiple -C options are given, each\nsubsequent \nnon-absolute -C <path> is interpreted relative to the\npreceding -C \n<path>. If <path> is present but empty, e.g. -C\n\"\", then the \ncurrent working directory is left unchanged.",
      "takes_argument": true
    },
    {
      "aliases": [
        "--git-dir",
        "--work-tree",
        "-C"
      ],
      "description": "git --git-dir=a.git\n--work-tree=b -C c status \ngit --git-dir=c/a.git --work-tree=c/b status",
      "takes_argument": false
    },
    {
      "aliases": [
        "-c"
      ],
      "description": "-c <name>=<value>\n\nPass a configuration parameter to the command. The value\ngiven will \noverride values from configuration files. The <name>\nis expected in \nthe same format as listed by git config (subkeys separated\nby \ndots).",
      "takes_argument": true
    },
    {
      "aliases": [
        "--config-env"
      ],
      "description": "--config-env=<name>=<envvar>\n\nLike -c <name>=<value>, give configuration\nvariable <name> a value, \nwhere <envvar> is the name of an environment variable\nfrom which to \nretrieve the value. Unlike -c there is no shortcut for\ndirectly \nsetting the value to an empty string, instead the\nenvironment \nvariable itself must be set to the empty string. It is an\nerror if \nthe <envvar> does not exist in the environment.\n<envvar> may not \ncontain an equals sign to avoid ambiguity with <name>\ncontaining \none.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--exec-path"
      ],
      "description": "--exec-path[=<path>] \nPath to wherever your core Git programs are installed. This\ncan \nalso be controlled by setting the GIT_EXEC_PATH environment\n\nvariable. If no path is given, git will print the current\nsetting \nand then exit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--html-path"
      ],
      "description": "--html-path \nPrint the path, without trailing slash, where Git√¢s\nHTML \ndocumentation is installed and exit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--man-path"
      ],
      "description": "--man-path \nPrint the manpath (see man(1)) for the man pages for this\nversion \nof Git and exit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--info-path"
      ],
      "description": "--info-path \nPrint the path where the Info files documenting this version\nof Git \nare installed and exit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-p",
        "--paginate"
      ],
      "description": "-p, --paginate \nPipe all output into less (or if set, $PAGER) if standard\noutput is \na terminal. This overrides the pager.<cmd>\nconfiguration options \n(see the \"Configuration Mechanism\" section\nbelow).",
      "takes_argument": false
    },
    {
      "aliases": [
        "-P",
        "--no-pager"
      ],
      "description": "-P, --no-pager \nDo not pipe Git output into a pager.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--git-dir"
      ],
      "description": "--git-dir=<path> \nSet the path to the repository (\".git\" directory).\nThis can also be \ncontrolled by setting the GIT_DIR environment variable. It\ncan be \nan absolute path or relative path to current working\ndirectory.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--work-tree"
      ],
      "description": "--work-tree=<path> \nSet the path to the working tree. It can be an absolute path\nor a \npath relative to the current working directory. This can\nalso be \ncontrolled by setting the GIT_WORK_TREE environment variable\nand \nthe core.worktree configuration variable (see core.worktree\nin git- \nconfig(1) for a more detailed discussion).",
      "takes_argument": false
    },
    {
      "aliases": [
        "--namespace"
      ],
      "description": "--namespace=<path> \nSet the Git namespace. See gitnamespaces(7) for more\ndetails. \nEquivalent to setting the GIT_NAMESPACE environment\nvariable.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--super-prefix"
      ],
      "description": "--super-prefix=<path> \nCurrently for internal use only. Set a prefix which gives a\npath \nfrom above a repository down to its root. One use is to give\n\nsubmodules context about the superproject that invoked\nit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--bare"
      ],
      "description": "--bare \nTreat the repository as a bare repository. If GIT_DIR\nenvironment \nis not set, it is set to the current working directory.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-replace-objects"
      ],
      "description": "--no-replace-objects \nDo not use replacement refs to replace Git objects. See git-\n\nreplace(1) for more information.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--literal-pathspecs"
      ],
      "description": "--literal-pathspecs \nTreat pathspecs literally (i.e. no globbing, no pathspec\nmagic). \nThis is equivalent to setting the GIT_LITERAL_PATHSPECS\nenvironment \nvariable to 1.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--glob-pathspecs"
      ],
      "description": "--glob-pathspecs \nAdd \"glob\" magic to all pathspec. This is\nequivalent to setting the \nGIT_GLOB_PATHSPECS environment variable to 1. Disabling\nglobbing on \nindividual pathspecs can be done using pathspec magic\n\":(literal)\"",
      "takes_argument": false
    },
    {
      "aliases": [
        "--noglob-pathspecs"
      ],
      "description": "--noglob-pathspecs \nAdd \"literal\" magic to all pathspec. This is\nequivalent to setting \nthe GIT_NOGLOB_PATHSPECS environment variable to 1. Enabling\n\nglobbing on individual pathspecs can be done using pathspec\nmagic \n\":(glob)\"",
      "takes_argument": false
    },
    {
      "aliases": [
        "--icase-pathspecs"
      ],
      "description": "--icase-pathspecs \nAdd \"icase\" magic to all pathspec. This is\nequivalent to setting \nthe GIT_ICASE_PATHSPECS environment variable to 1.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--no-optional-locks"
      ],
      "description": "--no-optional-locks \nDo not perform optional operations that require locks. This\nis \nequivalent to setting the GIT_OPTIONAL_LOCKS to 0.",
      "takes_argument": false
    },
    {
      "aliases": [
        "--list-cmds"
      ],
      "description": "--list-cmds=group[,group...]\n\nList commands by group. This is an internal/experimental\noption and \nmay change or be removed in the future. Supported groups\nare: \nbuiltins, parseopt (builtin commands that use\nparse-options), main \n(all commands in libexec directory), others (all other\ncommands in \n$PATH that have git- prefix), list-<category> (see\ncategories in \ncommand-list.txt), nohelpers (exclude helper commands),\nalias and \nconfig (retrieve command list from config variable \ncompletion.commands)",
      "takes_argument": false
    },
    {
      "aliases": [
        "-LEVEL"
      ],
      "description": "HIGH-LEVEL COMMANDS (PORCELAIN)\n\nWe separate the porcelain commands into the main commands\nand some \nancillary user utilities.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-am"
      ],
      "description": "git-am(1) \nApply a series of patches from a mailbox.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-archive"
      ],
      "description": "git-archive(1) \nCreate an archive of files from a named tree.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-bisect"
      ],
      "description": "git-bisect(1) \nUse binary search to find the commit that introduced a\nbug.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-branch"
      ],
      "description": "git-branch(1) \nList, create, or delete branches.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-bundle"
      ],
      "description": "git-bundle(1) \nMove objects and refs by archive.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-checkout"
      ],
      "description": "git-checkout(1) \nSwitch branches or restore working tree files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-cherry-pick"
      ],
      "description": "git-cherry-pick(1) \nApply the changes introduced by some existing commits.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-citool"
      ],
      "description": "git-citool(1) \nGraphical alternative to git-commit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-clean"
      ],
      "description": "git-clean(1) \nRemove untracked files from the working tree.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-clone"
      ],
      "description": "git-clone(1) \nClone a repository into a new directory.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-commit"
      ],
      "description": "git-commit(1) \nRecord changes to the repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-describe"
      ],
      "description": "git-describe(1) \nGive an object a human readable name based on an available\nref.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-diff"
      ],
      "description": "git-diff(1) \nShow changes between commits, commit and working tree,\netc.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fetch"
      ],
      "description": "git-fetch(1) \nDownload objects and refs from another repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-format-patch"
      ],
      "description": "git-format-patch(1) \nPrepare patches for e-mail submission.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-gc"
      ],
      "description": "git-gc(1) \nCleanup unnecessary files and optimize the local\nrepository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-grep"
      ],
      "description": "git-grep(1) \nPrint lines matching a pattern.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-gui"
      ],
      "description": "git-gui(1) \nA portable graphical interface to Git.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-init"
      ],
      "description": "git-init(1) \nCreate an empty Git repository or reinitialize an existing\none.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-log"
      ],
      "description": "git-log(1) \nShow commit logs.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-maintenance"
      ],
      "description": "git-maintenance(1) \nRun tasks to optimize Git repository data.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge"
      ],
      "description": "git-merge(1) \nJoin two or more development histories together.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mv"
      ],
      "description": "git-mv(1) \nMove or rename a file, a directory, or a symlink.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-notes"
      ],
      "description": "git-notes(1) \nAdd or inspect object notes.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-pull"
      ],
      "description": "git-pull(1) \nFetch from and integrate with another repository or a local\nbranch.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-push"
      ],
      "description": "git-push(1) \nUpdate remote refs along with associated objects.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-range-diff"
      ],
      "description": "git-range-diff(1) \nCompare two commit ranges (e.g. two versions of a\nbranch).",
      "takes_argument": false
    },
    {
      "aliases": [
        "-rebase"
      ],
      "description": "git-rebase(1) \nReapply commits on top of another base tip.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-reset"
      ],
      "description": "git-reset(1) \nReset current HEAD to the specified state.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-restore"
      ],
      "description": "git-restore(1) \nRestore working tree files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-revert"
      ],
      "description": "git-revert(1) \nRevert some existing commits.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-rm"
      ],
      "description": "git-rm(1) \nRemove files from the working tree and from the index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-shortlog"
      ],
      "description": "git-shortlog(1) \nSummarize git log output.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-show"
      ],
      "description": "git-show(1) \nShow various types of objects.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-sparse-checkout"
      ],
      "description": "git-sparse-checkout(1) \nReduce your working tree to a subset of tracked files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-stash"
      ],
      "description": "git-stash(1) \nStash the changes in a dirty working directory away.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-status"
      ],
      "description": "git-status(1) \nShow the working tree status.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-submodule"
      ],
      "description": "git-submodule(1) \nInitialize, update or inspect submodules.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-switch"
      ],
      "description": "git-switch(1) \nSwitch branches.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-tag"
      ],
      "description": "git-tag(1) \nCreate, list, delete or verify a tag object signed with\nGPG.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-worktree"
      ],
      "description": "git-worktree(1) \nManage multiple working trees.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-config"
      ],
      "description": "git-config(1) \nGet and set repository or global options.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fast-export"
      ],
      "description": "git-fast-export(1) \nGit data exporter.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fast-import"
      ],
      "description": "git-fast-import(1) \nBackend for fast Git data importers.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-filter-branch"
      ],
      "description": "git-filter-branch(1) \nRewrite branches.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mergetool"
      ],
      "description": "git-mergetool(1) \nRun merge conflict resolution tools to resolve merge\nconflicts.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-pack-refs"
      ],
      "description": "git-pack-refs(1) \nPack heads and tags for efficient repository access.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-prune"
      ],
      "description": "git-prune(1) \nPrune all unreachable objects from the object database.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-reflog"
      ],
      "description": "git-reflog(1) \nManage reflog information.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-remote"
      ],
      "description": "git-remote(1) \nManage set of tracked repositories.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-repack"
      ],
      "description": "git-repack(1) \nPack unpacked objects in a repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-replace"
      ],
      "description": "git-replace(1) \nCreate, list, delete refs to replace objects.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-annotate"
      ],
      "description": "git-annotate(1) \nAnnotate file lines with commit information.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-blame"
      ],
      "description": "git-blame(1) \nShow what revision and author last modified each line of a\nfile.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-bugreport"
      ],
      "description": "git-bugreport(1) \nCollect information for user to file a bug report.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-count-objects"
      ],
      "description": "git-count-objects(1) \nCount unpacked number of objects and their disk\nconsumption.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-difftool"
      ],
      "description": "git-difftool(1) \nShow changes using common diff tools.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fsck"
      ],
      "description": "git-fsck(1) \nVerifies the connectivity and validity of the objects in the\n\ndatabase.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-help"
      ],
      "description": "git-help(1) \nDisplay help information about Git.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-instaweb"
      ],
      "description": "git-instaweb(1) \nInstantly browse your working repository in gitweb.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge-tree"
      ],
      "description": "git-merge-tree(1) \nShow three-way merge without touching index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-rerere"
      ],
      "description": "git-rerere(1) \nReuse recorded resolution of conflicted merges.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-show-branch"
      ],
      "description": "git-show-branch(1) \nShow branches and their commits.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-verify-commit"
      ],
      "description": "git-verify-commit(1) \nCheck the GPG signature of commits.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-verify-tag"
      ],
      "description": "git-verify-tag(1) \nCheck the GPG signature of tags.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-whatchanged"
      ],
      "description": "git-whatchanged(1) \nShow logs with difference each commit introduces.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-archimport"
      ],
      "description": "git-archimport(1) \nImport a GNU Arch repository into Git.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-cvsexportcommit"
      ],
      "description": "git-cvsexportcommit(1) \nExport a single commit to a CVS checkout.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-cvsimport"
      ],
      "description": "git-cvsimport(1) \nSalvage your data out of another SCM people love to\nhate.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-cvsserver"
      ],
      "description": "git-cvsserver(1) \nA CVS server emulator for Git.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-imap-send"
      ],
      "description": "git-imap-send(1) \nSend a collection of patches from stdin to an IMAP\nfolder.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-p4"
      ],
      "description": "git-p4(1) \nImport from and submit to Perforce repositories.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-quiltimport"
      ],
      "description": "git-quiltimport(1) \nApplies a quilt patchset onto the current branch.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-request-pull"
      ],
      "description": "git-request-pull(1) \nGenerates a summary of pending changes.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-send-email"
      ],
      "description": "git-send-email(1) \nSend a collection of patches as emails.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-svn"
      ],
      "description": "git-svn(1) \nBidirectional operation between a Subversion repository and\nGit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-revert"
      ],
      "description": "√¢¬¢ git-revert(1) is\nabout making a new commit that reverts the changes \nmade by other commits.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-restore"
      ],
      "description": "√¢¬¢ git-restore(1) is\nabout restoring files in the working tree from \neither the index or another commit. This command does not\nupdate \nyour branch. The command can also be used to restore files\nin the \nindex from another commit.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-reset"
      ],
      "description": "√¢¬¢ git-reset(1) is\nabout updating your branch, moving the tip in order \nto add or remove commits from the branch. This operation\nchanges \nthe commit history.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-LEVEL"
      ],
      "description": "LOW-LEVEL COMMANDS (PLUMBING)\n\nAlthough Git includes its own porcelain layer, its low-level\ncommands \nare sufficient to support development of alternative\nporcelains. \nDevelopers of such porcelains might start by reading about\ngit-update- \nindex(1) and git-read-tree(1).",
      "takes_argument": false
    },
    {
      "aliases": [
        "-checkout-index"
      ],
      "description": "git-checkout-index(1) \nCopy files from the index to the working tree.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-commit-graph"
      ],
      "description": "git-commit-graph(1) \nWrite and verify Git commit-graph files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-commit-tree"
      ],
      "description": "git-commit-tree(1) \nCreate a new commit object.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-hash-object"
      ],
      "description": "git-hash-object(1) \nCompute object ID and optionally creates a blob from a\nfile.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-index-pack"
      ],
      "description": "git-index-pack(1) \nBuild pack index file for an existing packed archive.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge-file"
      ],
      "description": "git-merge-file(1) \nRun a three-way file merge.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge-index"
      ],
      "description": "git-merge-index(1) \nRun a merge for files needing merging.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mktag"
      ],
      "description": "git-mktag(1) \nCreates a tag object with extra validation.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mktree"
      ],
      "description": "git-mktree(1) \nBuild a tree-object from ls-tree formatted text.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-multi-pack-index"
      ],
      "description": "git-multi-pack-index(1) \nWrite and verify multi-pack-indexes.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-pack-objects"
      ],
      "description": "git-pack-objects(1) \nCreate a packed archive of objects.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-prune-packed"
      ],
      "description": "git-prune-packed(1) \nRemove extra objects that are already in pack files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-read-tree"
      ],
      "description": "git-read-tree(1) \nReads tree information into the index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-symbolic-ref"
      ],
      "description": "git-symbolic-ref(1) \nRead, modify and delete symbolic refs.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-unpack-objects"
      ],
      "description": "git-unpack-objects(1) \nUnpack objects from a packed archive.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-update-index"
      ],
      "description": "git-update-index(1) \nRegister file contents in the working tree to the index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-update-ref"
      ],
      "description": "git-update-ref(1) \nUpdate the object name stored in a ref safely.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-write-tree"
      ],
      "description": "git-write-tree(1) \nCreate a tree object from the current index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-cherry"
      ],
      "description": "git-cherry(1) \nFind commits yet to be applied to upstream.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-diff-files"
      ],
      "description": "git-diff-files(1) \nCompares files in the working tree and the index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-diff-index"
      ],
      "description": "git-diff-index(1) \nCompare a tree to the working tree or index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-diff-tree"
      ],
      "description": "git-diff-tree(1) \nCompares the content and mode of blobs found via two tree\nobjects.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-for-each-ref"
      ],
      "description": "git-for-each-ref(1) \nOutput information on each ref.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-for-each-repo"
      ],
      "description": "git-for-each-repo(1) \nRun a Git command on a list of repositories.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-get-tar-commit-id"
      ],
      "description": "git-get-tar-commit-id(1) \nExtract commit ID from an archive created using\ngit-archive.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-ls-files"
      ],
      "description": "git-ls-files(1) \nShow information about files in the index and the working\ntree.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-ls-remote"
      ],
      "description": "git-ls-remote(1) \nList references in a remote repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-ls-tree"
      ],
      "description": "git-ls-tree(1) \nList the contents of a tree object.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge-base"
      ],
      "description": "git-merge-base(1) \nFind as good common ancestors as possible for a merge.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-name-rev"
      ],
      "description": "git-name-rev(1) \nFind symbolic names for given revs.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-pack-redundant"
      ],
      "description": "git-pack-redundant(1) \nFind redundant pack files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-rev-list"
      ],
      "description": "git-rev-list(1) \nLists commit objects in reverse chronological order.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-rev-parse"
      ],
      "description": "git-rev-parse(1) \nPick out and massage parameters.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-show-index"
      ],
      "description": "git-show-index(1) \nShow packed archive index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-show-ref"
      ],
      "description": "git-show-ref(1) \nList references in a local repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-unpack-file"
      ],
      "description": "git-unpack-file(1) \nCreates a temporary file with a blob√¢s contents.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-var"
      ],
      "description": "git-var(1) \nShow a Git logical variable.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-verify-pack"
      ],
      "description": "git-verify-pack(1) \nValidate packed Git archive files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fetch-pack"
      ],
      "description": "git-fetch-pack(1) \nReceive missing objects from another repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-http-backend"
      ],
      "description": "git-http-backend(1) \nServer side implementation of Git over HTTP.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-send-pack"
      ],
      "description": "git-send-pack(1) \nPush objects over Git protocol to another repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-update-server-info"
      ],
      "description": "git-update-server-info(1) \nUpdate auxiliary info file to help dumb servers.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-http-fetch"
      ],
      "description": "git-http-fetch(1) \nDownload from a remote Git repository via HTTP.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-http-push"
      ],
      "description": "git-http-push(1) \nPush objects over HTTP/DAV to another repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-receive-pack"
      ],
      "description": "git-receive-pack(1) \nReceive what is pushed into the repository.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-shell"
      ],
      "description": "git-shell(1) \nRestricted login shell for Git-only SSH access.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-upload-archive"
      ],
      "description": "git-upload-archive(1) \nSend archive back to git-archive.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-upload-pack"
      ],
      "description": "git-upload-pack(1) \nSend objects packed back to git-fetch-pack.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-check-attr"
      ],
      "description": "git-check-attr(1) \nDisplay gitattributes information.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-check-ignore"
      ],
      "description": "git-check-ignore(1) \nDebug gitignore / exclude files.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-check-mailmap"
      ],
      "description": "git-check-mailmap(1) \nShow canonical names and email addresses of contacts.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-check-ref-format"
      ],
      "description": "git-check-ref-format(1) \nEnsures that a reference name is well formed.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-column"
      ],
      "description": "git-column(1) \nDisplay data in columns.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-credential"
      ],
      "description": "git-credential(1) \nRetrieve and store user credentials.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-credential-cache"
      ],
      "description": "git-credential-cache(1) \nHelper to temporarily store passwords in memory.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-credential-store"
      ],
      "description": "git-credential-store(1) \nHelper to store credentials on disk.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-fmt-merge-msg"
      ],
      "description": "git-fmt-merge-msg(1) \nProduce a merge commit message.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-hook"
      ],
      "description": "git-hook(1) \nRun git hooks.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-interpret-trailers"
      ],
      "description": "git-interpret-trailers(1) \nAdd or parse structured information in commit messages.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mailinfo"
      ],
      "description": "git-mailinfo(1) \nExtracts patch and authorship from a single e-mail\nmessage.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mailsplit"
      ],
      "description": "git-mailsplit(1) \nSimple UNIX mbox splitter program.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-merge-one-file"
      ],
      "description": "git-merge-one-file(1) \nThe standard helper program to use with git-merge-index.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-patch-id"
      ],
      "description": "git-patch-id(1) \nCompute unique ID for a patch.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-sh-i18n"
      ],
      "description": "git-sh-i18n(1) \nGit√¢s i18n setup code for shell scripts.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-sh-setup"
      ],
      "description": "git-sh-setup(1) \nCommon Git shell script setup code.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-stripspace"
      ],
      "description": "git-stripspace(1) \nRemove unnecessary whitespace.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-tutorial"
      ],
      "description": "gitcore-tutorial(7) \nA Git core tutorial for developers.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-migration"
      ],
      "description": "gitcvs-migration(7) \nGit for CVS users.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-helpers"
      ],
      "description": "gitremote-helpers(7) \nHelper programs to interact with remote repositories.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-layout"
      ],
      "description": "gitrepository-layout(5) \nGit Repository Layout.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-2"
      ],
      "description": "gittutorial-2(7) \nA tutorial introduction to Git: part two.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-ish"
      ],
      "description": "<tree-ish> \nIndicates a tree, commit or tag object name. A command that\ntakes a \n<tree-ish> argument ultimately wants to operate on a\n<tree> object \nbut automatically dereferences <commit> and\n<tag> objects that \npoint at a <tree>.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-ish"
      ],
      "description": "<commit-ish> \nIndicates a commit or tag object name. A command that takes\na \n<commit-ish> argument ultimately wants to operate on a\n<commit> \nobject but automatically dereferences <tag> objects\nthat point at a \n<commit>.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-file",
        "-hex",
        "-mode",
        "-file",
        "-hex",
        "-mode"
      ],
      "description": "path old-file old-hex old-mode\nnew-file new-hex new-mode",
      "takes_argument": false
    },
    {
      "aliases": [
        "-file"
      ],
      "description": "<old|new>-file \nare files GIT_EXTERNAL_DIFF can use to read the contents of\n\n<old|new>,",
      "takes_argument": false
    },
    {
      "aliases": [
        "-hex"
      ],
      "description": "<old|new>-hex \nare the 40-hexdigit SHA-1 hashes,",
      "takes_argument": false
    },
    {
      "aliases": [
        "-mode"
      ],
      "description": "<old|new>-mode \nare the octal representation of the file modes.",
      "takes_argument": false
    },
    {
      "aliases": [
        "-security",
        "-security"
      ],
      "description": "7. git-security@googlegroups.com\n\nmailto:git-security@googlegroups.com",
      "takes_argument": false
    }
  ]
}